// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package twilio.flutter.twilio_conversations;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationClientData {
    private @Nullable String myIdentity;
    public @Nullable String getMyIdentity() { return myIdentity; }
    public void setMyIdentity(@Nullable String setterArg) {
      this.myIdentity = setterArg;
    }

    private @Nullable String connectionState;
    public @Nullable String getConnectionState() { return connectionState; }
    public void setConnectionState(@Nullable String setterArg) {
      this.connectionState = setterArg;
    }

    private @Nullable Boolean isReachabilityEnabled;
    public @Nullable Boolean getIsReachabilityEnabled() { return isReachabilityEnabled; }
    public void setIsReachabilityEnabled(@Nullable Boolean setterArg) {
      this.isReachabilityEnabled = setterArg;
    }

    public static class Builder {
      private @Nullable String myIdentity;
      public @NonNull Builder setMyIdentity(@Nullable String setterArg) {
        this.myIdentity = setterArg;
        return this;
      }
      private @Nullable String connectionState;
      public @NonNull Builder setConnectionState(@Nullable String setterArg) {
        this.connectionState = setterArg;
        return this;
      }
      private @Nullable Boolean isReachabilityEnabled;
      public @NonNull Builder setIsReachabilityEnabled(@Nullable Boolean setterArg) {
        this.isReachabilityEnabled = setterArg;
        return this;
      }
      public @NonNull ConversationClientData build() {
        ConversationClientData pigeonReturn = new ConversationClientData();
        pigeonReturn.setMyIdentity(myIdentity);
        pigeonReturn.setConnectionState(connectionState);
        pigeonReturn.setIsReachabilityEnabled(isReachabilityEnabled);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("myIdentity", myIdentity);
      toMapResult.put("connectionState", connectionState);
      toMapResult.put("isReachabilityEnabled", isReachabilityEnabled);
      return toMapResult;
    }
    static @NonNull ConversationClientData fromMap(@NonNull Map<String, Object> map) {
      ConversationClientData pigeonResult = new ConversationClientData();
      Object myIdentity = map.get("myIdentity");
      pigeonResult.setMyIdentity((String)myIdentity);
      Object connectionState = map.get("connectionState");
      pigeonResult.setConnectionState((String)connectionState);
      Object isReachabilityEnabled = map.get("isReachabilityEnabled");
      pigeonResult.setIsReachabilityEnabled((Boolean)isReachabilityEnabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PropertiesData {
    private @Nullable String region;
    public @Nullable String getRegion() { return region; }
    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    public static class Builder {
      private @Nullable String region;
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }
      public @NonNull PropertiesData build() {
        PropertiesData pigeonReturn = new PropertiesData();
        pigeonReturn.setRegion(region);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("region", region);
      return toMapResult;
    }
    static @NonNull PropertiesData fromMap(@NonNull Map<String, Object> map) {
      PropertiesData pigeonResult = new PropertiesData();
      Object region = map.get("region");
      pigeonResult.setRegion((String)region);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationData {
    private @Nullable String sid;
    public @Nullable String getSid() { return sid; }
    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable AttributesData attributes;
    public @Nullable AttributesData getAttributes() { return attributes; }
    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String uniqueName;
    public @Nullable String getUniqueName() { return uniqueName; }
    public void setUniqueName(@Nullable String setterArg) {
      this.uniqueName = setterArg;
    }

    private @Nullable String friendlyName;
    public @Nullable String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable String status;
    public @Nullable String getStatus() { return status; }
    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable String synchronizationStatus;
    public @Nullable String getSynchronizationStatus() { return synchronizationStatus; }
    public void setSynchronizationStatus(@Nullable String setterArg) {
      this.synchronizationStatus = setterArg;
    }

    private @Nullable String dateCreated;
    public @Nullable String getDateCreated() { return dateCreated; }
    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String createdBy;
    public @Nullable String getCreatedBy() { return createdBy; }
    public void setCreatedBy(@Nullable String setterArg) {
      this.createdBy = setterArg;
    }

    private @Nullable String dateUpdated;
    public @Nullable String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String lastMessageDate;
    public @Nullable String getLastMessageDate() { return lastMessageDate; }
    public void setLastMessageDate(@Nullable String setterArg) {
      this.lastMessageDate = setterArg;
    }

    private @Nullable Long lastReadMessageIndex;
    public @Nullable Long getLastReadMessageIndex() { return lastReadMessageIndex; }
    public void setLastReadMessageIndex(@Nullable Long setterArg) {
      this.lastReadMessageIndex = setterArg;
    }

    private @Nullable Long lastMessageIndex;
    public @Nullable Long getLastMessageIndex() { return lastMessageIndex; }
    public void setLastMessageIndex(@Nullable Long setterArg) {
      this.lastMessageIndex = setterArg;
    }

    public static class Builder {
      private @Nullable String sid;
      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }
      private @Nullable AttributesData attributes;
      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }
      private @Nullable String uniqueName;
      public @NonNull Builder setUniqueName(@Nullable String setterArg) {
        this.uniqueName = setterArg;
        return this;
      }
      private @Nullable String friendlyName;
      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }
      private @Nullable String status;
      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }
      private @Nullable String synchronizationStatus;
      public @NonNull Builder setSynchronizationStatus(@Nullable String setterArg) {
        this.synchronizationStatus = setterArg;
        return this;
      }
      private @Nullable String dateCreated;
      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }
      private @Nullable String createdBy;
      public @NonNull Builder setCreatedBy(@Nullable String setterArg) {
        this.createdBy = setterArg;
        return this;
      }
      private @Nullable String dateUpdated;
      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }
      private @Nullable String lastMessageDate;
      public @NonNull Builder setLastMessageDate(@Nullable String setterArg) {
        this.lastMessageDate = setterArg;
        return this;
      }
      private @Nullable Long lastReadMessageIndex;
      public @NonNull Builder setLastReadMessageIndex(@Nullable Long setterArg) {
        this.lastReadMessageIndex = setterArg;
        return this;
      }
      private @Nullable Long lastMessageIndex;
      public @NonNull Builder setLastMessageIndex(@Nullable Long setterArg) {
        this.lastMessageIndex = setterArg;
        return this;
      }
      public @NonNull ConversationData build() {
        ConversationData pigeonReturn = new ConversationData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setUniqueName(uniqueName);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setStatus(status);
        pigeonReturn.setSynchronizationStatus(synchronizationStatus);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setCreatedBy(createdBy);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setLastMessageDate(lastMessageDate);
        pigeonReturn.setLastReadMessageIndex(lastReadMessageIndex);
        pigeonReturn.setLastMessageIndex(lastMessageIndex);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("uniqueName", uniqueName);
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("status", status);
      toMapResult.put("synchronizationStatus", synchronizationStatus);
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("createdBy", createdBy);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("lastMessageDate", lastMessageDate);
      toMapResult.put("lastReadMessageIndex", lastReadMessageIndex);
      toMapResult.put("lastMessageIndex", lastMessageIndex);
      return toMapResult;
    }
    static @NonNull ConversationData fromMap(@NonNull Map<String, Object> map) {
      ConversationData pigeonResult = new ConversationData();
      Object sid = map.get("sid");
      pigeonResult.setSid((String)sid);
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes(AttributesData.fromMap((Map)attributes));
      Object uniqueName = map.get("uniqueName");
      pigeonResult.setUniqueName((String)uniqueName);
      Object friendlyName = map.get("friendlyName");
      pigeonResult.setFriendlyName((String)friendlyName);
      Object status = map.get("status");
      pigeonResult.setStatus((String)status);
      Object synchronizationStatus = map.get("synchronizationStatus");
      pigeonResult.setSynchronizationStatus((String)synchronizationStatus);
      Object dateCreated = map.get("dateCreated");
      pigeonResult.setDateCreated((String)dateCreated);
      Object createdBy = map.get("createdBy");
      pigeonResult.setCreatedBy((String)createdBy);
      Object dateUpdated = map.get("dateUpdated");
      pigeonResult.setDateUpdated((String)dateUpdated);
      Object lastMessageDate = map.get("lastMessageDate");
      pigeonResult.setLastMessageDate((String)lastMessageDate);
      Object lastReadMessageIndex = map.get("lastReadMessageIndex");
      pigeonResult.setLastReadMessageIndex((lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer)lastReadMessageIndex : (Long)lastReadMessageIndex));
      Object lastMessageIndex = map.get("lastMessageIndex");
      pigeonResult.setLastMessageIndex((lastMessageIndex == null) ? null : ((lastMessageIndex instanceof Integer) ? (Integer)lastMessageIndex : (Long)lastMessageIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AttributesData {
    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String data;
    public @Nullable String getData() { return data; }
    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    public static class Builder {
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String data;
      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull AttributesData build() {
        AttributesData pigeonReturn = new AttributesData();
        pigeonReturn.setType(type);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type);
      toMapResult.put("data", data);
      return toMapResult;
    }
    static @NonNull AttributesData fromMap(@NonNull Map<String, Object> map) {
      AttributesData pigeonResult = new AttributesData();
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object data = map.get("data");
      pigeonResult.setData((String)data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TokenData {
    private @Nullable String token;
    public @Nullable String getToken() { return token; }
    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    public static class Builder {
      private @Nullable String token;
      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }
      public @NonNull TokenData build() {
        TokenData pigeonReturn = new TokenData();
        pigeonReturn.setToken(token);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("token", token);
      return toMapResult;
    }
    static @NonNull TokenData fromMap(@NonNull Map<String, Object> map) {
      TokenData pigeonResult = new TokenData();
      Object token = map.get("token");
      pigeonResult.setToken((String)token);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageMediaData {
    private @Nullable String sid;
    public @Nullable String getSid() { return sid; }
    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable String fileName;
    public @Nullable String getFileName() { return fileName; }
    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long size;
    public @Nullable Long getSize() { return size; }
    public void setSize(@Nullable Long setterArg) {
      this.size = setterArg;
    }

    private @Nullable String conversationSid;
    public @Nullable String getConversationSid() { return conversationSid; }
    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String messageSid;
    public @Nullable String getMessageSid() { return messageSid; }
    public void setMessageSid(@Nullable String setterArg) {
      this.messageSid = setterArg;
    }

    private @Nullable Long messageIndex;
    public @Nullable Long getMessageIndex() { return messageIndex; }
    public void setMessageIndex(@Nullable Long setterArg) {
      this.messageIndex = setterArg;
    }

    public static class Builder {
      private @Nullable String sid;
      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }
      private @Nullable String fileName;
      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable Long size;
      public @NonNull Builder setSize(@Nullable Long setterArg) {
        this.size = setterArg;
        return this;
      }
      private @Nullable String conversationSid;
      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }
      private @Nullable String messageSid;
      public @NonNull Builder setMessageSid(@Nullable String setterArg) {
        this.messageSid = setterArg;
        return this;
      }
      private @Nullable Long messageIndex;
      public @NonNull Builder setMessageIndex(@Nullable Long setterArg) {
        this.messageIndex = setterArg;
        return this;
      }
      public @NonNull MessageMediaData build() {
        MessageMediaData pigeonReturn = new MessageMediaData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setType(type);
        pigeonReturn.setSize(size);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setMessageSid(messageSid);
        pigeonReturn.setMessageIndex(messageIndex);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("fileName", fileName);
      toMapResult.put("type", type);
      toMapResult.put("size", size);
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("messageSid", messageSid);
      toMapResult.put("messageIndex", messageIndex);
      return toMapResult;
    }
    static @NonNull MessageMediaData fromMap(@NonNull Map<String, Object> map) {
      MessageMediaData pigeonResult = new MessageMediaData();
      Object sid = map.get("sid");
      pigeonResult.setSid((String)sid);
      Object fileName = map.get("fileName");
      pigeonResult.setFileName((String)fileName);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      Object conversationSid = map.get("conversationSid");
      pigeonResult.setConversationSid((String)conversationSid);
      Object messageSid = map.get("messageSid");
      pigeonResult.setMessageSid((String)messageSid);
      Object messageIndex = map.get("messageIndex");
      pigeonResult.setMessageIndex((messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer)messageIndex : (Long)messageIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageData {
    private @Nullable String sid;
    public @Nullable String getSid() { return sid; }
    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable Long messageIndex;
    public @Nullable Long getMessageIndex() { return messageIndex; }
    public void setMessageIndex(@Nullable Long setterArg) {
      this.messageIndex = setterArg;
    }

    private @Nullable String author;
    public @Nullable String getAuthor() { return author; }
    public void setAuthor(@Nullable String setterArg) {
      this.author = setterArg;
    }

    private @Nullable String subject;
    public @Nullable String getSubject() { return subject; }
    public void setSubject(@Nullable String setterArg) {
      this.subject = setterArg;
    }

    private @Nullable String messageBody;
    public @Nullable String getMessageBody() { return messageBody; }
    public void setMessageBody(@Nullable String setterArg) {
      this.messageBody = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean hasMedia;
    public @Nullable Boolean getHasMedia() { return hasMedia; }
    public void setHasMedia(@Nullable Boolean setterArg) {
      this.hasMedia = setterArg;
    }

    private @Nullable MessageMediaData media;
    public @Nullable MessageMediaData getMedia() { return media; }
    public void setMedia(@Nullable MessageMediaData setterArg) {
      this.media = setterArg;
    }

    private @Nullable String conversationSid;
    public @Nullable String getConversationSid() { return conversationSid; }
    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String participantSid;
    public @Nullable String getParticipantSid() { return participantSid; }
    public void setParticipantSid(@Nullable String setterArg) {
      this.participantSid = setterArg;
    }

    private @Nullable String dateCreated;
    public @Nullable String getDateCreated() { return dateCreated; }
    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String dateUpdated;
    public @Nullable String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String lastUpdatedBy;
    public @Nullable String getLastUpdatedBy() { return lastUpdatedBy; }
    public void setLastUpdatedBy(@Nullable String setterArg) {
      this.lastUpdatedBy = setterArg;
    }

    private @Nullable AttributesData attributes;
    public @Nullable AttributesData getAttributes() { return attributes; }
    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    public static class Builder {
      private @Nullable String sid;
      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }
      private @Nullable Long messageIndex;
      public @NonNull Builder setMessageIndex(@Nullable Long setterArg) {
        this.messageIndex = setterArg;
        return this;
      }
      private @Nullable String author;
      public @NonNull Builder setAuthor(@Nullable String setterArg) {
        this.author = setterArg;
        return this;
      }
      private @Nullable String subject;
      public @NonNull Builder setSubject(@Nullable String setterArg) {
        this.subject = setterArg;
        return this;
      }
      private @Nullable String messageBody;
      public @NonNull Builder setMessageBody(@Nullable String setterArg) {
        this.messageBody = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable Boolean hasMedia;
      public @NonNull Builder setHasMedia(@Nullable Boolean setterArg) {
        this.hasMedia = setterArg;
        return this;
      }
      private @Nullable MessageMediaData media;
      public @NonNull Builder setMedia(@Nullable MessageMediaData setterArg) {
        this.media = setterArg;
        return this;
      }
      private @Nullable String conversationSid;
      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }
      private @Nullable String participantSid;
      public @NonNull Builder setParticipantSid(@Nullable String setterArg) {
        this.participantSid = setterArg;
        return this;
      }
      private @Nullable String dateCreated;
      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }
      private @Nullable String dateUpdated;
      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }
      private @Nullable String lastUpdatedBy;
      public @NonNull Builder setLastUpdatedBy(@Nullable String setterArg) {
        this.lastUpdatedBy = setterArg;
        return this;
      }
      private @Nullable AttributesData attributes;
      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }
      public @NonNull MessageData build() {
        MessageData pigeonReturn = new MessageData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setMessageIndex(messageIndex);
        pigeonReturn.setAuthor(author);
        pigeonReturn.setSubject(subject);
        pigeonReturn.setMessageBody(messageBody);
        pigeonReturn.setType(type);
        pigeonReturn.setHasMedia(hasMedia);
        pigeonReturn.setMedia(media);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setParticipantSid(participantSid);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setLastUpdatedBy(lastUpdatedBy);
        pigeonReturn.setAttributes(attributes);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("messageIndex", messageIndex);
      toMapResult.put("author", author);
      toMapResult.put("subject", subject);
      toMapResult.put("messageBody", messageBody);
      toMapResult.put("type", type);
      toMapResult.put("hasMedia", hasMedia);
      toMapResult.put("media", (media == null) ? null : media.toMap());
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("participantSid", participantSid);
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("lastUpdatedBy", lastUpdatedBy);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      return toMapResult;
    }
    static @NonNull MessageData fromMap(@NonNull Map<String, Object> map) {
      MessageData pigeonResult = new MessageData();
      Object sid = map.get("sid");
      pigeonResult.setSid((String)sid);
      Object messageIndex = map.get("messageIndex");
      pigeonResult.setMessageIndex((messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer)messageIndex : (Long)messageIndex));
      Object author = map.get("author");
      pigeonResult.setAuthor((String)author);
      Object subject = map.get("subject");
      pigeonResult.setSubject((String)subject);
      Object messageBody = map.get("messageBody");
      pigeonResult.setMessageBody((String)messageBody);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object hasMedia = map.get("hasMedia");
      pigeonResult.setHasMedia((Boolean)hasMedia);
      Object media = map.get("media");
      pigeonResult.setMedia(MessageMediaData.fromMap((Map)media));
      Object conversationSid = map.get("conversationSid");
      pigeonResult.setConversationSid((String)conversationSid);
      Object participantSid = map.get("participantSid");
      pigeonResult.setParticipantSid((String)participantSid);
      Object dateCreated = map.get("dateCreated");
      pigeonResult.setDateCreated((String)dateCreated);
      Object dateUpdated = map.get("dateUpdated");
      pigeonResult.setDateUpdated((String)dateUpdated);
      Object lastUpdatedBy = map.get("lastUpdatedBy");
      pigeonResult.setLastUpdatedBy((String)lastUpdatedBy);
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes(AttributesData.fromMap((Map)attributes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageOptionsData {
    private @Nullable String body;
    public @Nullable String getBody() { return body; }
    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    private @Nullable AttributesData attributes;
    public @Nullable AttributesData getAttributes() { return attributes; }
    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String mimeType;
    public @Nullable String getMimeType() { return mimeType; }
    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable String filename;
    public @Nullable String getFilename() { return filename; }
    public void setFilename(@Nullable String setterArg) {
      this.filename = setterArg;
    }

    private @Nullable String inputPath;
    public @Nullable String getInputPath() { return inputPath; }
    public void setInputPath(@Nullable String setterArg) {
      this.inputPath = setterArg;
    }

    private @Nullable Long mediaProgressListenerId;
    public @Nullable Long getMediaProgressListenerId() { return mediaProgressListenerId; }
    public void setMediaProgressListenerId(@Nullable Long setterArg) {
      this.mediaProgressListenerId = setterArg;
    }

    public static class Builder {
      private @Nullable String body;
      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }
      private @Nullable AttributesData attributes;
      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }
      private @Nullable String mimeType;
      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }
      private @Nullable String filename;
      public @NonNull Builder setFilename(@Nullable String setterArg) {
        this.filename = setterArg;
        return this;
      }
      private @Nullable String inputPath;
      public @NonNull Builder setInputPath(@Nullable String setterArg) {
        this.inputPath = setterArg;
        return this;
      }
      private @Nullable Long mediaProgressListenerId;
      public @NonNull Builder setMediaProgressListenerId(@Nullable Long setterArg) {
        this.mediaProgressListenerId = setterArg;
        return this;
      }
      public @NonNull MessageOptionsData build() {
        MessageOptionsData pigeonReturn = new MessageOptionsData();
        pigeonReturn.setBody(body);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setFilename(filename);
        pigeonReturn.setInputPath(inputPath);
        pigeonReturn.setMediaProgressListenerId(mediaProgressListenerId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("body", body);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("mimeType", mimeType);
      toMapResult.put("filename", filename);
      toMapResult.put("inputPath", inputPath);
      toMapResult.put("mediaProgressListenerId", mediaProgressListenerId);
      return toMapResult;
    }
    static @NonNull MessageOptionsData fromMap(@NonNull Map<String, Object> map) {
      MessageOptionsData pigeonResult = new MessageOptionsData();
      Object body = map.get("body");
      pigeonResult.setBody((String)body);
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes(AttributesData.fromMap((Map)attributes));
      Object mimeType = map.get("mimeType");
      pigeonResult.setMimeType((String)mimeType);
      Object filename = map.get("filename");
      pigeonResult.setFilename((String)filename);
      Object inputPath = map.get("inputPath");
      pigeonResult.setInputPath((String)inputPath);
      Object mediaProgressListenerId = map.get("mediaProgressListenerId");
      pigeonResult.setMediaProgressListenerId((mediaProgressListenerId == null) ? null : ((mediaProgressListenerId instanceof Integer) ? (Integer)mediaProgressListenerId : (Long)mediaProgressListenerId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ParticipantData {
    private @Nullable String sid;
    public @Nullable String getSid() { return sid; }
    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable String conversationSid;
    public @Nullable String getConversationSid() { return conversationSid; }
    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable AttributesData attributes;
    public @Nullable AttributesData getAttributes() { return attributes; }
    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String dateCreated;
    public @Nullable String getDateCreated() { return dateCreated; }
    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String dateUpdated;
    public @Nullable String getDateUpdated() { return dateUpdated; }
    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String identity;
    public @Nullable String getIdentity() { return identity; }
    public void setIdentity(@Nullable String setterArg) {
      this.identity = setterArg;
    }

    private @Nullable Long lastReadMessageIndex;
    public @Nullable Long getLastReadMessageIndex() { return lastReadMessageIndex; }
    public void setLastReadMessageIndex(@Nullable Long setterArg) {
      this.lastReadMessageIndex = setterArg;
    }

    private @Nullable String lastReadTimestamp;
    public @Nullable String getLastReadTimestamp() { return lastReadTimestamp; }
    public void setLastReadTimestamp(@Nullable String setterArg) {
      this.lastReadTimestamp = setterArg;
    }

    public static class Builder {
      private @Nullable String sid;
      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }
      private @Nullable String conversationSid;
      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable AttributesData attributes;
      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }
      private @Nullable String dateCreated;
      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }
      private @Nullable String dateUpdated;
      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }
      private @Nullable String identity;
      public @NonNull Builder setIdentity(@Nullable String setterArg) {
        this.identity = setterArg;
        return this;
      }
      private @Nullable Long lastReadMessageIndex;
      public @NonNull Builder setLastReadMessageIndex(@Nullable Long setterArg) {
        this.lastReadMessageIndex = setterArg;
        return this;
      }
      private @Nullable String lastReadTimestamp;
      public @NonNull Builder setLastReadTimestamp(@Nullable String setterArg) {
        this.lastReadTimestamp = setterArg;
        return this;
      }
      public @NonNull ParticipantData build() {
        ParticipantData pigeonReturn = new ParticipantData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setType(type);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setIdentity(identity);
        pigeonReturn.setLastReadMessageIndex(lastReadMessageIndex);
        pigeonReturn.setLastReadTimestamp(lastReadTimestamp);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sid", sid);
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("type", type);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("dateCreated", dateCreated);
      toMapResult.put("dateUpdated", dateUpdated);
      toMapResult.put("identity", identity);
      toMapResult.put("lastReadMessageIndex", lastReadMessageIndex);
      toMapResult.put("lastReadTimestamp", lastReadTimestamp);
      return toMapResult;
    }
    static @NonNull ParticipantData fromMap(@NonNull Map<String, Object> map) {
      ParticipantData pigeonResult = new ParticipantData();
      Object sid = map.get("sid");
      pigeonResult.setSid((String)sid);
      Object conversationSid = map.get("conversationSid");
      pigeonResult.setConversationSid((String)conversationSid);
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes(AttributesData.fromMap((Map)attributes));
      Object dateCreated = map.get("dateCreated");
      pigeonResult.setDateCreated((String)dateCreated);
      Object dateUpdated = map.get("dateUpdated");
      pigeonResult.setDateUpdated((String)dateUpdated);
      Object identity = map.get("identity");
      pigeonResult.setIdentity((String)identity);
      Object lastReadMessageIndex = map.get("lastReadMessageIndex");
      pigeonResult.setLastReadMessageIndex((lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer)lastReadMessageIndex : (Long)lastReadMessageIndex));
      Object lastReadTimestamp = map.get("lastReadTimestamp");
      pigeonResult.setLastReadTimestamp((String)lastReadTimestamp);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DeliveryReceiptData {
    private @Nullable Long total;
    public @Nullable Long getTotal() { return total; }
    public void setTotal(@Nullable Long setterArg) {
      this.total = setterArg;
    }

    private @Nullable String read;
    public @Nullable String getRead() { return read; }
    public void setRead(@Nullable String setterArg) {
      this.read = setterArg;
    }

    private @Nullable String undelivered;
    public @Nullable String getUndelivered() { return undelivered; }
    public void setUndelivered(@Nullable String setterArg) {
      this.undelivered = setterArg;
    }

    private @Nullable String delivered;
    public @Nullable String getDelivered() { return delivered; }
    public void setDelivered(@Nullable String setterArg) {
      this.delivered = setterArg;
    }

    private @Nullable String failed;
    public @Nullable String getFailed() { return failed; }
    public void setFailed(@Nullable String setterArg) {
      this.failed = setterArg;
    }

    private @Nullable String sent;
    public @Nullable String getSent() { return sent; }
    public void setSent(@Nullable String setterArg) {
      this.sent = setterArg;
    }

    public static class Builder {
      private @Nullable Long total;
      public @NonNull Builder setTotal(@Nullable Long setterArg) {
        this.total = setterArg;
        return this;
      }
      private @Nullable String read;
      public @NonNull Builder setRead(@Nullable String setterArg) {
        this.read = setterArg;
        return this;
      }
      private @Nullable String undelivered;
      public @NonNull Builder setUndelivered(@Nullable String setterArg) {
        this.undelivered = setterArg;
        return this;
      }
      private @Nullable String delivered;
      public @NonNull Builder setDelivered(@Nullable String setterArg) {
        this.delivered = setterArg;
        return this;
      }
      private @Nullable String failed;
      public @NonNull Builder setFailed(@Nullable String setterArg) {
        this.failed = setterArg;
        return this;
      }
      private @Nullable String sent;
      public @NonNull Builder setSent(@Nullable String setterArg) {
        this.sent = setterArg;
        return this;
      }
      public @NonNull DeliveryReceiptData build() {
        DeliveryReceiptData pigeonReturn = new DeliveryReceiptData();
        pigeonReturn.setTotal(total);
        pigeonReturn.setRead(read);
        pigeonReturn.setUndelivered(undelivered);
        pigeonReturn.setDelivered(delivered);
        pigeonReturn.setFailed(failed);
        pigeonReturn.setSent(sent);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("total", total);
      toMapResult.put("read", read);
      toMapResult.put("undelivered", undelivered);
      toMapResult.put("delivered", delivered);
      toMapResult.put("failed", failed);
      toMapResult.put("sent", sent);
      return toMapResult;
    }
    static @NonNull DeliveryReceiptData fromMap(@NonNull Map<String, Object> map) {
      DeliveryReceiptData pigeonResult = new DeliveryReceiptData();
      Object total = map.get("total");
      pigeonResult.setTotal((total == null) ? null : ((total instanceof Integer) ? (Integer)total : (Long)total));
      Object read = map.get("read");
      pigeonResult.setRead((String)read);
      Object undelivered = map.get("undelivered");
      pigeonResult.setUndelivered((String)undelivered);
      Object delivered = map.get("delivered");
      pigeonResult.setDelivered((String)delivered);
      Object failed = map.get("failed");
      pigeonResult.setFailed((String)failed);
      Object sent = map.get("sent");
      pigeonResult.setSent((String)sent);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DetailedDeliveryReceiptData {
    private @Nullable String conversationSid;
    public @Nullable String getConversationSid() { return conversationSid; }
    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String channelMessageSid;
    public @Nullable String getChannelMessageSid() { return channelMessageSid; }
    public void setChannelMessageSid(@Nullable String setterArg) {
      this.channelMessageSid = setterArg;
    }

    private @Nullable String dateCreatedAsDate;
    public @Nullable String getDateCreatedAsDate() { return dateCreatedAsDate; }
    public void setDateCreatedAsDate(@Nullable String setterArg) {
      this.dateCreatedAsDate = setterArg;
    }

    private @Nullable String dateUpdatedAsDate;
    public @Nullable String getDateUpdatedAsDate() { return dateUpdatedAsDate; }
    public void setDateUpdatedAsDate(@Nullable String setterArg) {
      this.dateUpdatedAsDate = setterArg;
    }

    private @Nullable Long errorCode;
    public @Nullable Long getErrorCode() { return errorCode; }
    public void setErrorCode(@Nullable Long setterArg) {
      this.errorCode = setterArg;
    }

    private @Nullable String messageSid;
    public @Nullable String getMessageSid() { return messageSid; }
    public void setMessageSid(@Nullable String setterArg) {
      this.messageSid = setterArg;
    }

    private @Nullable String participantSid;
    public @Nullable String getParticipantSid() { return participantSid; }
    public void setParticipantSid(@Nullable String setterArg) {
      this.participantSid = setterArg;
    }

    private @Nullable String sid;
    public @Nullable String getSid() { return sid; }
    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    public static class Builder {
      private @Nullable String conversationSid;
      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }
      private @Nullable String channelMessageSid;
      public @NonNull Builder setChannelMessageSid(@Nullable String setterArg) {
        this.channelMessageSid = setterArg;
        return this;
      }
      private @Nullable String dateCreatedAsDate;
      public @NonNull Builder setDateCreatedAsDate(@Nullable String setterArg) {
        this.dateCreatedAsDate = setterArg;
        return this;
      }
      private @Nullable String dateUpdatedAsDate;
      public @NonNull Builder setDateUpdatedAsDate(@Nullable String setterArg) {
        this.dateUpdatedAsDate = setterArg;
        return this;
      }
      private @Nullable Long errorCode;
      public @NonNull Builder setErrorCode(@Nullable Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }
      private @Nullable String messageSid;
      public @NonNull Builder setMessageSid(@Nullable String setterArg) {
        this.messageSid = setterArg;
        return this;
      }
      private @Nullable String participantSid;
      public @NonNull Builder setParticipantSid(@Nullable String setterArg) {
        this.participantSid = setterArg;
        return this;
      }
      private @Nullable String sid;
      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }
      public @NonNull DetailedDeliveryReceiptData build() {
        DetailedDeliveryReceiptData pigeonReturn = new DetailedDeliveryReceiptData();
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setChannelMessageSid(channelMessageSid);
        pigeonReturn.setDateCreatedAsDate(dateCreatedAsDate);
        pigeonReturn.setDateUpdatedAsDate(dateUpdatedAsDate);
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setMessageSid(messageSid);
        pigeonReturn.setParticipantSid(participantSid);
        pigeonReturn.setSid(sid);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("conversationSid", conversationSid);
      toMapResult.put("channelMessageSid", channelMessageSid);
      toMapResult.put("dateCreatedAsDate", dateCreatedAsDate);
      toMapResult.put("dateUpdatedAsDate", dateUpdatedAsDate);
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("messageSid", messageSid);
      toMapResult.put("participantSid", participantSid);
      toMapResult.put("sid", sid);
      return toMapResult;
    }
    static @NonNull DetailedDeliveryReceiptData fromMap(@NonNull Map<String, Object> map) {
      DetailedDeliveryReceiptData pigeonResult = new DetailedDeliveryReceiptData();
      Object conversationSid = map.get("conversationSid");
      pigeonResult.setConversationSid((String)conversationSid);
      Object channelMessageSid = map.get("channelMessageSid");
      pigeonResult.setChannelMessageSid((String)channelMessageSid);
      Object dateCreatedAsDate = map.get("dateCreatedAsDate");
      pigeonResult.setDateCreatedAsDate((String)dateCreatedAsDate);
      Object dateUpdatedAsDate = map.get("dateUpdatedAsDate");
      pigeonResult.setDateUpdatedAsDate((String)dateUpdatedAsDate);
      Object errorCode = map.get("errorCode");
      pigeonResult.setErrorCode((errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode));
      Object messageSid = map.get("messageSid");
      pigeonResult.setMessageSid((String)messageSid);
      Object participantSid = map.get("participantSid");
      pigeonResult.setParticipantSid((String)participantSid);
      Object sid = map.get("sid");
      pigeonResult.setSid((String)sid);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserData {
    private @Nullable String identity;
    public @Nullable String getIdentity() { return identity; }
    public void setIdentity(@Nullable String setterArg) {
      this.identity = setterArg;
    }

    private @Nullable AttributesData attributes;
    public @Nullable AttributesData getAttributes() { return attributes; }
    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String friendlyName;
    public @Nullable String getFriendlyName() { return friendlyName; }
    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable Boolean isNotifiable;
    public @Nullable Boolean getIsNotifiable() { return isNotifiable; }
    public void setIsNotifiable(@Nullable Boolean setterArg) {
      this.isNotifiable = setterArg;
    }

    private @Nullable Boolean isOnline;
    public @Nullable Boolean getIsOnline() { return isOnline; }
    public void setIsOnline(@Nullable Boolean setterArg) {
      this.isOnline = setterArg;
    }

    private @Nullable Boolean isSubscribed;
    public @Nullable Boolean getIsSubscribed() { return isSubscribed; }
    public void setIsSubscribed(@Nullable Boolean setterArg) {
      this.isSubscribed = setterArg;
    }

    public static class Builder {
      private @Nullable String identity;
      public @NonNull Builder setIdentity(@Nullable String setterArg) {
        this.identity = setterArg;
        return this;
      }
      private @Nullable AttributesData attributes;
      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }
      private @Nullable String friendlyName;
      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }
      private @Nullable Boolean isNotifiable;
      public @NonNull Builder setIsNotifiable(@Nullable Boolean setterArg) {
        this.isNotifiable = setterArg;
        return this;
      }
      private @Nullable Boolean isOnline;
      public @NonNull Builder setIsOnline(@Nullable Boolean setterArg) {
        this.isOnline = setterArg;
        return this;
      }
      private @Nullable Boolean isSubscribed;
      public @NonNull Builder setIsSubscribed(@Nullable Boolean setterArg) {
        this.isSubscribed = setterArg;
        return this;
      }
      public @NonNull UserData build() {
        UserData pigeonReturn = new UserData();
        pigeonReturn.setIdentity(identity);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setIsNotifiable(isNotifiable);
        pigeonReturn.setIsOnline(isOnline);
        pigeonReturn.setIsSubscribed(isSubscribed);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identity", identity);
      toMapResult.put("attributes", (attributes == null) ? null : attributes.toMap());
      toMapResult.put("friendlyName", friendlyName);
      toMapResult.put("isNotifiable", isNotifiable);
      toMapResult.put("isOnline", isOnline);
      toMapResult.put("isSubscribed", isSubscribed);
      return toMapResult;
    }
    static @NonNull UserData fromMap(@NonNull Map<String, Object> map) {
      UserData pigeonResult = new UserData();
      Object identity = map.get("identity");
      pigeonResult.setIdentity((String)identity);
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes(AttributesData.fromMap((Map)attributes));
      Object friendlyName = map.get("friendlyName");
      pigeonResult.setFriendlyName((String)friendlyName);
      Object isNotifiable = map.get("isNotifiable");
      pigeonResult.setIsNotifiable((Boolean)isNotifiable);
      Object isOnline = map.get("isOnline");
      pigeonResult.setIsOnline((Boolean)isOnline);
      Object isSubscribed = map.get("isSubscribed");
      pigeonResult.setIsSubscribed((Boolean)isSubscribed);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MessageCount {
    private @Nullable Long count;
    public @Nullable Long getCount() { return count; }
    public void setCount(@Nullable Long setterArg) {
      this.count = setterArg;
    }

    public static class Builder {
      private @Nullable Long count;
      public @NonNull Builder setCount(@Nullable Long setterArg) {
        this.count = setterArg;
        return this;
      }
      public @NonNull MessageCount build() {
        MessageCount pigeonReturn = new MessageCount();
        pigeonReturn.setCount(count);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("count", count);
      return toMapResult;
    }
    static @NonNull MessageCount fromMap(@NonNull Map<String, Object> map) {
      MessageCount pigeonResult = new MessageCount();
      Object count = map.get("count");
      pigeonResult.setCount((count == null) ? null : ((count instanceof Integer) ? (Integer)count : (Long)count));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConversationUpdatedData {
    private @Nullable ConversationData conversation;
    public @Nullable ConversationData getConversation() { return conversation; }
    public void setConversation(@Nullable ConversationData setterArg) {
      this.conversation = setterArg;
    }

    private @Nullable String reason;
    public @Nullable String getReason() { return reason; }
    public void setReason(@Nullable String setterArg) {
      this.reason = setterArg;
    }

    public static class Builder {
      private @Nullable ConversationData conversation;
      public @NonNull Builder setConversation(@Nullable ConversationData setterArg) {
        this.conversation = setterArg;
        return this;
      }
      private @Nullable String reason;
      public @NonNull Builder setReason(@Nullable String setterArg) {
        this.reason = setterArg;
        return this;
      }
      public @NonNull ConversationUpdatedData build() {
        ConversationUpdatedData pigeonReturn = new ConversationUpdatedData();
        pigeonReturn.setConversation(conversation);
        pigeonReturn.setReason(reason);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("conversation", (conversation == null) ? null : conversation.toMap());
      toMapResult.put("reason", reason);
      return toMapResult;
    }
    static @NonNull ConversationUpdatedData fromMap(@NonNull Map<String, Object> map) {
      ConversationUpdatedData pigeonResult = new ConversationUpdatedData();
      Object conversation = map.get("conversation");
      pigeonResult.setConversation(ConversationData.fromMap((Map)conversation));
      Object reason = map.get("reason");
      pigeonResult.setReason((String)reason);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ErrorInfoData {
    private @Nullable Long code;
    public @Nullable Long getCode() { return code; }
    public void setCode(@Nullable Long setterArg) {
      this.code = setterArg;
    }

    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    private @Nullable Long status;
    public @Nullable Long getStatus() { return status; }
    public void setStatus(@Nullable Long setterArg) {
      this.status = setterArg;
    }

    public static class Builder {
      private @Nullable Long code;
      public @NonNull Builder setCode(@Nullable Long setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      private @Nullable Long status;
      public @NonNull Builder setStatus(@Nullable Long setterArg) {
        this.status = setterArg;
        return this;
      }
      public @NonNull ErrorInfoData build() {
        ErrorInfoData pigeonReturn = new ErrorInfoData();
        pigeonReturn.setCode(code);
        pigeonReturn.setMessage(message);
        pigeonReturn.setStatus(status);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("message", message);
      toMapResult.put("status", status);
      return toMapResult;
    }
    static @NonNull ErrorInfoData fromMap(@NonNull Map<String, Object> map) {
      ErrorInfoData pigeonResult = new ErrorInfoData();
      Object code = map.get("code");
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer)code : (Long)code));
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      Object status = map.get("status");
      pigeonResult.setStatus((status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PluginApiCodec extends StandardMessageCodec {
    public static final PluginApiCodec INSTANCE = new PluginApiCodec();
    private PluginApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConversationClientData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PropertiesData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConversationClientData) {
        stream.write(128);
        writeValue(stream, ((ConversationClientData) value).toMap());
      } else 
      if (value instanceof PropertiesData) {
        stream.write(129);
        writeValue(stream, ((PropertiesData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PluginApi {
    @NonNull void debug(Boolean enableNative, Boolean enableSdk);
    void create(String jwtToken, PropertiesData properties, Result<ConversationClientData> result);

    /** The codec used by PluginApi. */
    static MessageCodec<Object> getCodec() {
      return PluginApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PluginApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PluginApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PluginApi.debug", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enableNativeArg = (Boolean)args.get(0);
              if (enableNativeArg == null) {
                throw new NullPointerException("enableNativeArg unexpectedly null.");
              }
              Boolean enableSdkArg = (Boolean)args.get(1);
              if (enableSdkArg == null) {
                throw new NullPointerException("enableSdkArg unexpectedly null.");
              }
              api.debug(enableNativeArg, enableSdkArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PluginApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String jwtTokenArg = (String)args.get(0);
              if (jwtTokenArg == null) {
                throw new NullPointerException("jwtTokenArg unexpectedly null.");
              }
              PropertiesData propertiesArg = (PropertiesData)args.get(1);
              if (propertiesArg == null) {
                throw new NullPointerException("propertiesArg unexpectedly null.");
              }
              Result<ConversationClientData> resultCallback = new Result<ConversationClientData>() {
                public void success(ConversationClientData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.create(jwtTokenArg, propertiesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ConversationClientApiCodec extends StandardMessageCodec {
    public static final ConversationClientApiCodec INSTANCE = new ConversationClientApiCodec();
    private ConversationClientApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return TokenData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(129);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof TokenData) {
        stream.write(130);
        writeValue(stream, ((TokenData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(131);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConversationClientApi {
    void updateToken(String token, Result<Void> result);
    @NonNull void shutdown();
    void createConversation(String friendlyName, Result<ConversationData> result);
    void getMyConversations(Result<List<ConversationData>> result);
    void getConversation(String conversationSidOrUniqueName, Result<ConversationData> result);
    void getMyUser(Result<UserData> result);
    void registerForNotification(TokenData tokenData, Result<Void> result);
    void unregisterForNotification(TokenData tokenData, Result<Void> result);

    /** The codec used by ConversationClientApi. */
    static MessageCodec<Object> getCodec() {
      return ConversationClientApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ConversationClientApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConversationClientApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.updateToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String tokenArg = (String)args.get(0);
              if (tokenArg == null) {
                throw new NullPointerException("tokenArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateToken(tokenArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.shutdown", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.shutdown();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.createConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String friendlyNameArg = (String)args.get(0);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<ConversationData> resultCallback = new Result<ConversationData>() {
                public void success(ConversationData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.createConversation(friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getMyConversations", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<List<ConversationData>> resultCallback = new Result<List<ConversationData>>() {
                public void success(List<ConversationData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMyConversations(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidOrUniqueNameArg = (String)args.get(0);
              if (conversationSidOrUniqueNameArg == null) {
                throw new NullPointerException("conversationSidOrUniqueNameArg unexpectedly null.");
              }
              Result<ConversationData> resultCallback = new Result<ConversationData>() {
                public void success(ConversationData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getConversation(conversationSidOrUniqueNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.getMyUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<UserData> resultCallback = new Result<UserData>() {
                public void success(UserData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMyUser(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.registerForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TokenData tokenDataArg = (TokenData)args.get(0);
              if (tokenDataArg == null) {
                throw new NullPointerException("tokenDataArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.registerForNotification(tokenDataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationClientApi.unregisterForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              TokenData tokenDataArg = (TokenData)args.get(0);
              if (tokenDataArg == null) {
                throw new NullPointerException("tokenDataArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.unregisterForNotification(tokenDataArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ConversationApiCodec extends StandardMessageCodec {
    public static final ConversationApiCodec INSTANCE = new ConversationApiCodec();
    private ConversationApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return MessageCount.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return MessageMediaData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MessageOptionsData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof MessageCount) {
        stream.write(129);
        writeValue(stream, ((MessageCount) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(130);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageMediaData) {
        stream.write(131);
        writeValue(stream, ((MessageMediaData) value).toMap());
      } else 
      if (value instanceof MessageOptionsData) {
        stream.write(132);
        writeValue(stream, ((MessageOptionsData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(133);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConversationApi {
    void join(String conversationSid, Result<Void> result);
    void leave(String conversationSid, Result<Void> result);
    void destroy(String conversationSid, Result<Void> result);
    void typing(String conversationSid, Result<Void> result);
    void sendMessage(String conversationSid, MessageOptionsData options, Result<MessageData> result);
    void addParticipantByIdentity(String conversationSid, String identity, Result<Boolean> result);
    void removeParticipant(String conversationSid, String participantSid, Result<Boolean> result);
    void removeParticipantByIdentity(String conversationSid, String identity, Result<Boolean> result);
    void getParticipantByIdentity(String conversationSid, String identity, Result<ParticipantData> result);
    void getParticipantBySid(String conversationSid, String participantSid, Result<ParticipantData> result);
    void getParticipantsList(String conversationSid, Result<List<ParticipantData>> result);
    void getMessagesCount(String conversationSid, Result<MessageCount> result);
    void getUnreadMessagesCount(String conversationSid, Result<Long> result);
    void advanceLastReadMessageIndex(String conversationSid, Long lastReadMessageIndex, Result<MessageCount> result);
    void setLastReadMessageIndex(String conversationSid, Long lastReadMessageIndex, Result<MessageCount> result);
    void setAllMessagesRead(String conversationSid, Result<MessageCount> result);
    void setAllMessagesUnread(String conversationSid, Result<MessageCount> result);
    void getParticipantsCount(String conversationSid, Result<Long> result);
    void getMessagesAfter(String conversationSid, Long index, Long count, Result<List<MessageData>> result);
    void getMessagesBefore(String conversationSid, Long index, Long count, Result<List<MessageData>> result);
    void getMessageByIndex(String conversationSid, Long messageIndex, Result<MessageData> result);
    void getLastMessages(String conversationSid, Long count, Result<List<MessageData>> result);
    void removeMessage(String conversationSid, Long messageIndex, Result<Boolean> result);
    void setAttributes(String conversationSid, AttributesData attributes, Result<Void> result);
    void setFriendlyName(String conversationSid, String friendlyName, Result<Void> result);
    void setNotificationLevel(String conversationSid, String notificationLevel, Result<Void> result);
    void setUniqueName(String conversationSid, String uniqueName, Result<Void> result);

    /** The codec used by ConversationApi. */
    static MessageCodec<Object> getCodec() {
      return ConversationApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ConversationApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConversationApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.join", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.join(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.leave", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.leave(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.destroy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.destroy(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.typing", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.typing(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              MessageOptionsData optionsArg = (MessageOptionsData)args.get(1);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<MessageData> resultCallback = new Result<MessageData>() {
                public void success(MessageData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendMessage(conversationSidArg, optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.addParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeParticipant(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String identityArg = (String)args.get(1);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantBySid", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantBySid(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantsList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<List<ParticipantData>> resultCallback = new Result<List<ParticipantData>>() {
                public void success(List<ParticipantData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantsList(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getUnreadMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getUnreadMessagesCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.advanceLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number lastReadMessageIndexArg = (Number)args.get(1);
              if (lastReadMessageIndexArg == null) {
                throw new NullPointerException("lastReadMessageIndexArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.advanceLastReadMessageIndex(conversationSidArg, lastReadMessageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number lastReadMessageIndexArg = (Number)args.get(1);
              if (lastReadMessageIndexArg == null) {
                throw new NullPointerException("lastReadMessageIndexArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setLastReadMessageIndex(conversationSidArg, lastReadMessageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAllMessagesRead", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAllMessagesRead(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAllMessagesUnread", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<MessageCount> resultCallback = new Result<MessageCount>() {
                public void success(MessageCount result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAllMessagesUnread(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getParticipantsCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipantsCount(conversationSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesAfter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number indexArg = (Number)args.get(1);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(2);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesAfter(conversationSidArg, indexArg.longValue(), countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessagesBefore", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number indexArg = (Number)args.get(1);
              if (indexArg == null) {
                throw new NullPointerException("indexArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(2);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessagesBefore(conversationSidArg, indexArg.longValue(), countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getMessageByIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<MessageData> resultCallback = new Result<MessageData>() {
                public void success(MessageData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMessageByIndex(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.getLastMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number countArg = (Number)args.get(1);
              if (countArg == null) {
                throw new NullPointerException("countArg unexpectedly null.");
              }
              Result<List<MessageData>> resultCallback = new Result<List<MessageData>>() {
                public void success(List<MessageData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLastMessages(conversationSidArg, countArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.removeMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.removeMessage(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(1);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String friendlyNameArg = (String)args.get(1);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFriendlyName(conversationSidArg, friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setNotificationLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String notificationLevelArg = (String)args.get(1);
              if (notificationLevelArg == null) {
                throw new NullPointerException("notificationLevelArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setNotificationLevel(conversationSidArg, notificationLevelArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConversationApi.setUniqueName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String uniqueNameArg = (String)args.get(1);
              if (uniqueNameArg == null) {
                throw new NullPointerException("uniqueNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setUniqueName(conversationSidArg, uniqueNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ParticipantApiCodec extends StandardMessageCodec {
    public static final ParticipantApiCodec INSTANCE = new ParticipantApiCodec();
    private ParticipantApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(129);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ParticipantApi {
    void getUser(String conversationSid, String participantSid, Result<UserData> result);
    void setAttributes(String conversationSid, String participantSid, AttributesData attributes, Result<Void> result);
    void remove(String conversationSid, String participantSid, Result<Void> result);

    /** The codec used by ParticipantApi. */
    static MessageCodec<Object> getCodec() {
      return ParticipantApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ParticipantApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ParticipantApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.getUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<UserData> resultCallback = new Result<UserData>() {
                public void success(UserData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getUser(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(2);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, participantSidArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ParticipantApi.remove", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              String participantSidArg = (String)args.get(1);
              if (participantSidArg == null) {
                throw new NullPointerException("participantSidArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.remove(conversationSidArg, participantSidArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();
    private MessageApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return DeliveryReceiptData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return DetailedDeliveryReceiptData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof DeliveryReceiptData) {
        stream.write(129);
        writeValue(stream, ((DeliveryReceiptData) value).toMap());
      } else 
      if (value instanceof DetailedDeliveryReceiptData) {
        stream.write(130);
        writeValue(stream, ((DetailedDeliveryReceiptData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(131);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MessageApi {
    void getMediaContentTemporaryUrl(String conversationSid, Long messageIndex, Result<String> result);
    void getParticipant(String conversationSid, Long messageIndex, Result<ParticipantData> result);
    void setAttributes(String conversationSid, Long messageIndex, AttributesData attributes, Result<Void> result);
    void updateMessageBody(String conversationSid, Long messageIndex, String messageBody, Result<Void> result);
    void getAggregatedDeliveryReceipt(String conversationSid, Long messageIndex, Result<DeliveryReceiptData> result);
    void getDetailedDeliveryReceiptList(String conversationSid, Long messageIndex, Result<List<DetailedDeliveryReceiptData>> result);

    /** The codec used by MessageApi. */
    static MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }

    /** Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getMediaContentTemporaryUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getMediaContentTemporaryUrl(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<ParticipantData> resultCallback = new Result<ParticipantData>() {
                public void success(ParticipantData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getParticipant(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(2);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(conversationSidArg, messageIndexArg.longValue(), attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.updateMessageBody", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              String messageBodyArg = (String)args.get(2);
              if (messageBodyArg == null) {
                throw new NullPointerException("messageBodyArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateMessageBody(conversationSidArg, messageIndexArg.longValue(), messageBodyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getAggregatedDeliveryReceipt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<DeliveryReceiptData> resultCallback = new Result<DeliveryReceiptData>() {
                public void success(DeliveryReceiptData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getAggregatedDeliveryReceipt(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MessageApi.getDetailedDeliveryReceiptList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String conversationSidArg = (String)args.get(0);
              if (conversationSidArg == null) {
                throw new NullPointerException("conversationSidArg unexpectedly null.");
              }
              Number messageIndexArg = (Number)args.get(1);
              if (messageIndexArg == null) {
                throw new NullPointerException("messageIndexArg unexpectedly null.");
              }
              Result<List<DetailedDeliveryReceiptData>> resultCallback = new Result<List<DetailedDeliveryReceiptData>>() {
                public void success(List<DetailedDeliveryReceiptData> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getDetailedDeliveryReceiptList(conversationSidArg, messageIndexArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class UserApiCodec extends StandardMessageCodec {
    public static final UserApiCodec INSTANCE = new UserApiCodec();
    private UserApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface UserApi {
    void setFriendlyName(String identity, String friendlyName, Result<Void> result);
    void setAttributes(String identity, AttributesData attributes, Result<Void> result);

    /** The codec used by UserApi. */
    static MessageCodec<Object> getCodec() {
      return UserApiCodec.INSTANCE;
    }

    /** Sets up an instance of `UserApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, UserApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String identityArg = (String)args.get(0);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              String friendlyNameArg = (String)args.get(1);
              if (friendlyNameArg == null) {
                throw new NullPointerException("friendlyNameArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setFriendlyName(identityArg, friendlyNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.UserApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String identityArg = (String)args.get(0);
              if (identityArg == null) {
                throw new NullPointerException("identityArg unexpectedly null.");
              }
              AttributesData attributesArg = (AttributesData)args.get(1);
              if (attributesArg == null) {
                throw new NullPointerException("attributesArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setAttributes(identityArg, attributesArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterConversationClientApiCodec extends StandardMessageCodec {
    public static final FlutterConversationClientApiCodec INSTANCE = new FlutterConversationClientApiCodec();
    private FlutterConversationClientApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AttributesData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ConversationData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ConversationUpdatedData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ErrorInfoData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return MessageData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return MessageMediaData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ParticipantData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toMap());
      } else 
      if (value instanceof ConversationData) {
        stream.write(129);
        writeValue(stream, ((ConversationData) value).toMap());
      } else 
      if (value instanceof ConversationUpdatedData) {
        stream.write(130);
        writeValue(stream, ((ConversationUpdatedData) value).toMap());
      } else 
      if (value instanceof ErrorInfoData) {
        stream.write(131);
        writeValue(stream, ((ErrorInfoData) value).toMap());
      } else 
      if (value instanceof MessageData) {
        stream.write(132);
        writeValue(stream, ((MessageData) value).toMap());
      } else 
      if (value instanceof MessageMediaData) {
        stream.write(133);
        writeValue(stream, ((MessageMediaData) value).toMap());
      } else 
      if (value instanceof ParticipantData) {
        stream.write(134);
        writeValue(stream, ((ParticipantData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(135);
        writeValue(stream, ((UserData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterConversationClientApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterConversationClientApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterConversationClientApiCodec.INSTANCE;
    }

    public void error(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.error", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationAdded(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationUpdated(ConversationUpdatedData eventArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(eventArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationDeleted(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void clientSynchronization(String synchronizationStatusArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.clientSynchronization", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(synchronizationStatusArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void conversationSynchronizationChange(ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.conversationSynchronizationChange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void connectionStateChange(String connectionStateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.connectionStateChange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(connectionStateArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void tokenAboutToExpire(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.tokenAboutToExpire", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void tokenExpired(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.tokenExpired", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void userSubscribed(UserData userDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userSubscribed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void userUnsubscribed(UserData userDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userUnsubscribed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void userUpdated(UserData userDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.userUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(userDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void addedToConversationNotification(String conversationSidArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.addedToConversationNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void newMessageNotification(String conversationSidArg, Long messageIndexArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.newMessageNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageIndexArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void notificationSubscribed(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.notificationSubscribed", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void notificationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.notificationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void removedFromConversationNotification(String conversationSidArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.removedFromConversationNotification", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void registered(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.registered", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void registrationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.registrationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void deregistered(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.deregistered", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void deregistrationFailed(ErrorInfoData errorInfoDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.deregistrationFailed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorInfoDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageAdded(String conversationSidArg, MessageData messageDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageUpdated(String conversationSidArg, MessageData messageDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void messageDeleted(String conversationSidArg, MessageData messageDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.messageDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantAdded(String conversationSidArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantAdded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantUpdated(String conversationSidArg, ParticipantData participantDataArg, String reasonArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantUpdated", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg, reasonArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void participantDeleted(String conversationSidArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.participantDeleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void typingStarted(String conversationSidArg, ConversationData conversationDataArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.typingStarted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void typingEnded(String conversationSidArg, ConversationData conversationDataArg, ParticipantData participantDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.typingEnded", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void synchronizationChanged(String conversationSidArg, ConversationData conversationDataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterConversationClientApi.synchronizationChanged", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class FlutterLoggingApiCodec extends StandardMessageCodec {
    public static final FlutterLoggingApiCodec INSTANCE = new FlutterLoggingApiCodec();
    private FlutterLoggingApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterLoggingApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterLoggingApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return FlutterLoggingApiCodec.INSTANCE;
    }

    public void logFromHost(String msgArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterLoggingApi.logFromHost", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(msgArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
