// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ConversationClientData {
  ConversationClientData({
    this.myIdentity,
    this.connectionState,
    this.isReachabilityEnabled,
  });

  String? myIdentity;

  String? connectionState;

  bool? isReachabilityEnabled;

  Object encode() {
    return <Object?>[
      myIdentity,
      connectionState,
      isReachabilityEnabled,
    ];
  }

  static ConversationClientData decode(Object result) {
    result as List<Object?>;
    return ConversationClientData(
      myIdentity: result[0] as String?,
      connectionState: result[1] as String?,
      isReachabilityEnabled: result[2] as bool?,
    );
  }
}

class PropertiesData {
  PropertiesData({
    this.region,
  });

  String? region;

  Object encode() {
    return <Object?>[
      region,
    ];
  }

  static PropertiesData decode(Object result) {
    result as List<Object?>;
    return PropertiesData(
      region: result[0] as String?,
    );
  }
}

class ConversationData {
  ConversationData({
    this.sid,
    this.attributes,
    this.uniqueName,
    this.friendlyName,
    this.status,
    this.synchronizationStatus,
    this.dateCreated,
    this.createdBy,
    this.dateUpdated,
    this.lastMessageDate,
    this.lastReadMessageIndex,
    this.lastMessageIndex,
  });

  String? sid;

  AttributesData? attributes;

  String? uniqueName;

  String? friendlyName;

  String? status;

  String? synchronizationStatus;

  String? dateCreated;

  String? createdBy;

  String? dateUpdated;

  String? lastMessageDate;

  int? lastReadMessageIndex;

  int? lastMessageIndex;

  Object encode() {
    return <Object?>[
      sid,
      attributes?.encode(),
      uniqueName,
      friendlyName,
      status,
      synchronizationStatus,
      dateCreated,
      createdBy,
      dateUpdated,
      lastMessageDate,
      lastReadMessageIndex,
      lastMessageIndex,
    ];
  }

  static ConversationData decode(Object result) {
    result as List<Object?>;
    return ConversationData(
      sid: result[0] as String?,
      attributes: result[1] != null
          ? AttributesData.decode(result[1]! as List<Object?>)
          : null,
      uniqueName: result[2] as String?,
      friendlyName: result[3] as String?,
      status: result[4] as String?,
      synchronizationStatus: result[5] as String?,
      dateCreated: result[6] as String?,
      createdBy: result[7] as String?,
      dateUpdated: result[8] as String?,
      lastMessageDate: result[9] as String?,
      lastReadMessageIndex: result[10] as int?,
      lastMessageIndex: result[11] as int?,
    );
  }
}

class AttributesData {
  AttributesData({
    this.type,
    this.data,
  });

  String? type;

  String? data;

  Object encode() {
    return <Object?>[
      type,
      data,
    ];
  }

  static AttributesData decode(Object result) {
    result as List<Object?>;
    return AttributesData(
      type: result[0] as String?,
      data: result[1] as String?,
    );
  }
}

class TokenData {
  TokenData({
    this.token,
  });

  String? token;

  Object encode() {
    return <Object?>[
      token,
    ];
  }

  static TokenData decode(Object result) {
    result as List<Object?>;
    return TokenData(
      token: result[0] as String?,
    );
  }
}

class MessageMediaData {
  MessageMediaData({
    this.sid,
    this.fileName,
    this.type,
    this.size,
    this.conversationSid,
    this.messageSid,
    this.messageIndex,
  });

  String? sid;

  String? fileName;

  String? type;

  int? size;

  String? conversationSid;

  String? messageSid;

  int? messageIndex;

  Object encode() {
    return <Object?>[
      sid,
      fileName,
      type,
      size,
      conversationSid,
      messageSid,
      messageIndex,
    ];
  }

  static MessageMediaData decode(Object result) {
    result as List<Object?>;
    return MessageMediaData(
      sid: result[0] as String?,
      fileName: result[1] as String?,
      type: result[2] as String?,
      size: result[3] as int?,
      conversationSid: result[4] as String?,
      messageSid: result[5] as String?,
      messageIndex: result[6] as int?,
    );
  }
}

class MessageData {
  MessageData({
    this.sid,
    this.messageIndex,
    this.author,
    this.subject,
    this.messageBody,
    this.type,
    this.hasMedia,
    this.media,
    this.conversationSid,
    this.participantSid,
    this.dateCreated,
    this.dateUpdated,
    this.lastUpdatedBy,
    this.attributes,
  });

  String? sid;

  int? messageIndex;

  String? author;

  String? subject;

  String? messageBody;

  String? type;

  bool? hasMedia;

  MessageMediaData? media;

  String? conversationSid;

  String? participantSid;

  String? dateCreated;

  String? dateUpdated;

  String? lastUpdatedBy;

  AttributesData? attributes;

  Object encode() {
    return <Object?>[
      sid,
      messageIndex,
      author,
      subject,
      messageBody,
      type,
      hasMedia,
      media?.encode(),
      conversationSid,
      participantSid,
      dateCreated,
      dateUpdated,
      lastUpdatedBy,
      attributes?.encode(),
    ];
  }

  static MessageData decode(Object result) {
    result as List<Object?>;
    return MessageData(
      sid: result[0] as String?,
      messageIndex: result[1] as int?,
      author: result[2] as String?,
      subject: result[3] as String?,
      messageBody: result[4] as String?,
      type: result[5] as String?,
      hasMedia: result[6] as bool?,
      media: result[7] != null
          ? MessageMediaData.decode(result[7]! as List<Object?>)
          : null,
      conversationSid: result[8] as String?,
      participantSid: result[9] as String?,
      dateCreated: result[10] as String?,
      dateUpdated: result[11] as String?,
      lastUpdatedBy: result[12] as String?,
      attributes: result[13] != null
          ? AttributesData.decode(result[13]! as List<Object?>)
          : null,
    );
  }
}

class MessageOptionsData {
  MessageOptionsData({
    this.body,
    this.attributes,
    this.mimeType,
    this.filename,
    this.inputPath,
    this.mediaProgressListenerId,
  });

  String? body;

  AttributesData? attributes;

  String? mimeType;

  String? filename;

  String? inputPath;

  int? mediaProgressListenerId;

  Object encode() {
    return <Object?>[
      body,
      attributes?.encode(),
      mimeType,
      filename,
      inputPath,
      mediaProgressListenerId,
    ];
  }

  static MessageOptionsData decode(Object result) {
    result as List<Object?>;
    return MessageOptionsData(
      body: result[0] as String?,
      attributes: result[1] != null
          ? AttributesData.decode(result[1]! as List<Object?>)
          : null,
      mimeType: result[2] as String?,
      filename: result[3] as String?,
      inputPath: result[4] as String?,
      mediaProgressListenerId: result[5] as int?,
    );
  }
}

class ParticipantData {
  ParticipantData({
    this.sid,
    this.conversationSid,
    this.type,
    this.attributes,
    this.dateCreated,
    this.dateUpdated,
    this.identity,
    this.lastReadMessageIndex,
    this.lastReadTimestamp,
  });

  String? sid;

  String? conversationSid;

  String? type;

  AttributesData? attributes;

  String? dateCreated;

  String? dateUpdated;

  String? identity;

  int? lastReadMessageIndex;

  String? lastReadTimestamp;

  Object encode() {
    return <Object?>[
      sid,
      conversationSid,
      type,
      attributes?.encode(),
      dateCreated,
      dateUpdated,
      identity,
      lastReadMessageIndex,
      lastReadTimestamp,
    ];
  }

  static ParticipantData decode(Object result) {
    result as List<Object?>;
    return ParticipantData(
      sid: result[0] as String?,
      conversationSid: result[1] as String?,
      type: result[2] as String?,
      attributes: result[3] != null
          ? AttributesData.decode(result[3]! as List<Object?>)
          : null,
      dateCreated: result[4] as String?,
      dateUpdated: result[5] as String?,
      identity: result[6] as String?,
      lastReadMessageIndex: result[7] as int?,
      lastReadTimestamp: result[8] as String?,
    );
  }
}

class DeliveryReceiptData {
  DeliveryReceiptData({
    this.total,
    this.read,
    this.undelivered,
    this.delivered,
    this.failed,
    this.sent,
  });

  int? total;

  String? read;

  String? undelivered;

  String? delivered;

  String? failed;

  String? sent;

  Object encode() {
    return <Object?>[
      total,
      read,
      undelivered,
      delivered,
      failed,
      sent,
    ];
  }

  static DeliveryReceiptData decode(Object result) {
    result as List<Object?>;
    return DeliveryReceiptData(
      total: result[0] as int?,
      read: result[1] as String?,
      undelivered: result[2] as String?,
      delivered: result[3] as String?,
      failed: result[4] as String?,
      sent: result[5] as String?,
    );
  }
}

class DetailedDeliveryReceiptData {
  DetailedDeliveryReceiptData({
    this.conversationSid,
    this.channelMessageSid,
    this.dateCreatedAsDate,
    this.dateUpdatedAsDate,
    this.errorCode,
    this.messageSid,
    this.participantSid,
    this.sid,
  });

  String? conversationSid;

  String? channelMessageSid;

  String? dateCreatedAsDate;

  String? dateUpdatedAsDate;

  int? errorCode;

  String? messageSid;

  String? participantSid;

  String? sid;

  Object encode() {
    return <Object?>[
      conversationSid,
      channelMessageSid,
      dateCreatedAsDate,
      dateUpdatedAsDate,
      errorCode,
      messageSid,
      participantSid,
      sid,
    ];
  }

  static DetailedDeliveryReceiptData decode(Object result) {
    result as List<Object?>;
    return DetailedDeliveryReceiptData(
      conversationSid: result[0] as String?,
      channelMessageSid: result[1] as String?,
      dateCreatedAsDate: result[2] as String?,
      dateUpdatedAsDate: result[3] as String?,
      errorCode: result[4] as int?,
      messageSid: result[5] as String?,
      participantSid: result[6] as String?,
      sid: result[7] as String?,
    );
  }
}

class UserData {
  UserData({
    this.identity,
    this.attributes,
    this.friendlyName,
    this.isNotifiable,
    this.isOnline,
    this.isSubscribed,
  });

  String? identity;

  AttributesData? attributes;

  String? friendlyName;

  bool? isNotifiable;

  bool? isOnline;

  bool? isSubscribed;

  Object encode() {
    return <Object?>[
      identity,
      attributes?.encode(),
      friendlyName,
      isNotifiable,
      isOnline,
      isSubscribed,
    ];
  }

  static UserData decode(Object result) {
    result as List<Object?>;
    return UserData(
      identity: result[0] as String?,
      attributes: result[1] != null
          ? AttributesData.decode(result[1]! as List<Object?>)
          : null,
      friendlyName: result[2] as String?,
      isNotifiable: result[3] as bool?,
      isOnline: result[4] as bool?,
      isSubscribed: result[5] as bool?,
    );
  }
}

class MessageCount {
  MessageCount({
    this.count,
  });

  int? count;

  Object encode() {
    return <Object?>[
      count,
    ];
  }

  static MessageCount decode(Object result) {
    result as List<Object?>;
    return MessageCount(
      count: result[0] as int?,
    );
  }
}

class ConversationUpdatedData {
  ConversationUpdatedData({
    this.conversation,
    this.reason,
  });

  ConversationData? conversation;

  String? reason;

  Object encode() {
    return <Object?>[
      conversation?.encode(),
      reason,
    ];
  }

  static ConversationUpdatedData decode(Object result) {
    result as List<Object?>;
    return ConversationUpdatedData(
      conversation: result[0] != null
          ? ConversationData.decode(result[0]! as List<Object?>)
          : null,
      reason: result[1] as String?,
    );
  }
}

class ErrorInfoData {
  ErrorInfoData({
    this.code,
    this.message,
    this.status,
  });

  int? code;

  String? message;

  int? status;

  Object encode() {
    return <Object?>[
      code,
      message,
      status,
    ];
  }

  static ErrorInfoData decode(Object result) {
    result as List<Object?>;
    return ErrorInfoData(
      code: result[0] as int?,
      message: result[1] as String?,
      status: result[2] as int?,
    );
  }
}

class _PluginApiCodec extends StandardMessageCodec {
  const _PluginApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConversationClientData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PropertiesData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ConversationClientData.decode(readValue(buffer)!);
      case 129: 
        return PropertiesData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PluginApi {
  /// Constructor for [PluginApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PluginApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PluginApiCodec();

  Future<void> debug(bool arg_enableNative, bool arg_enableSdk) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.PluginApi.debug', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enableNative, arg_enableSdk]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<ConversationClientData> create(String arg_jwtToken, PropertiesData arg_properties) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.PluginApi.create', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_jwtToken, arg_properties]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ConversationClientData?)!;
    }
  }
}

class _ConversationClientApiCodec extends StandardMessageCodec {
  const _ConversationClientApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ConversationData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is TokenData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is UserData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      case 129: 
        return ConversationData.decode(readValue(buffer)!);
      case 130: 
        return TokenData.decode(readValue(buffer)!);
      case 131: 
        return UserData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ConversationClientApi {
  /// Constructor for [ConversationClientApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ConversationClientApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ConversationClientApiCodec();

  Future<void> updateToken(String arg_token) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.updateToken', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_token]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> shutdown() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.shutdown', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<ConversationData> createConversation(String arg_friendlyName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.createConversation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_friendlyName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ConversationData?)!;
    }
  }

  Future<List<ConversationData?>> getMyConversations() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getMyConversations', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<ConversationData?>();
    }
  }

  Future<ConversationData> getConversation(String arg_conversationSidOrUniqueName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getConversation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSidOrUniqueName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ConversationData?)!;
    }
  }

  Future<UserData> getMyUser() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getMyUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UserData?)!;
    }
  }

  Future<void> registerForNotification(TokenData arg_tokenData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.registerForNotification', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_tokenData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unregisterForNotification(TokenData arg_tokenData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationClientApi.unregisterForNotification', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_tokenData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ConversationApiCodec extends StandardMessageCodec {
  const _ConversationApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MessageCount) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MessageData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MessageMediaData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MessageOptionsData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ParticipantData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      case 129: 
        return MessageCount.decode(readValue(buffer)!);
      case 130: 
        return MessageData.decode(readValue(buffer)!);
      case 131: 
        return MessageMediaData.decode(readValue(buffer)!);
      case 132: 
        return MessageOptionsData.decode(readValue(buffer)!);
      case 133: 
        return ParticipantData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ConversationApi {
  /// Constructor for [ConversationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ConversationApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ConversationApiCodec();

  Future<void> join(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.join', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> leave(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.leave', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> destroy(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.destroy', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> typing(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.typing', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MessageData> sendMessage(String arg_conversationSid, MessageOptionsData arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.sendMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageData?)!;
    }
  }

  Future<bool> addParticipantByIdentity(String arg_conversationSid, String arg_identity) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.addParticipantByIdentity', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_identity]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> removeParticipant(String arg_conversationSid, String arg_participantSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.removeParticipant', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_participantSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> removeParticipantByIdentity(String arg_conversationSid, String arg_identity) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.removeParticipantByIdentity', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_identity]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<ParticipantData> getParticipantByIdentity(String arg_conversationSid, String arg_identity) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantByIdentity', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_identity]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ParticipantData?)!;
    }
  }

  Future<ParticipantData> getParticipantBySid(String arg_conversationSid, String arg_participantSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantBySid', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_participantSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ParticipantData?)!;
    }
  }

  Future<List<ParticipantData?>> getParticipantsList(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantsList', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<ParticipantData?>();
    }
  }

  Future<MessageCount> getMessagesCount(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesCount', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageCount?)!;
    }
  }

  Future<int> getUnreadMessagesCount(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getUnreadMessagesCount', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<MessageCount> advanceLastReadMessageIndex(String arg_conversationSid, int arg_lastReadMessageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.advanceLastReadMessageIndex', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_lastReadMessageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageCount?)!;
    }
  }

  Future<MessageCount> setLastReadMessageIndex(String arg_conversationSid, int arg_lastReadMessageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setLastReadMessageIndex', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_lastReadMessageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageCount?)!;
    }
  }

  Future<MessageCount> setAllMessagesRead(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setAllMessagesRead', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageCount?)!;
    }
  }

  Future<MessageCount> setAllMessagesUnread(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setAllMessagesUnread', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageCount?)!;
    }
  }

  Future<int> getParticipantsCount(String arg_conversationSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantsCount', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<List<MessageData?>> getMessagesAfter(String arg_conversationSid, int arg_index, int arg_count) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesAfter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_index, arg_count]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MessageData?>();
    }
  }

  Future<List<MessageData?>> getMessagesBefore(String arg_conversationSid, int arg_index, int arg_count) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesBefore', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_index, arg_count]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MessageData?>();
    }
  }

  Future<MessageData> getMessageByIndex(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessageByIndex', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as MessageData?)!;
    }
  }

  Future<List<MessageData?>> getLastMessages(String arg_conversationSid, int arg_count) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.getLastMessages', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_count]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MessageData?>();
    }
  }

  Future<bool> removeMessage(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.removeMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setAttributes(String arg_conversationSid, AttributesData arg_attributes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setAttributes', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_attributes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setFriendlyName(String arg_conversationSid, String arg_friendlyName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setFriendlyName', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_friendlyName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setNotificationLevel(String arg_conversationSid, String arg_notificationLevel) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setNotificationLevel', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_notificationLevel]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUniqueName(String arg_conversationSid, String arg_uniqueName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ConversationApi.setUniqueName', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_uniqueName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ParticipantApiCodec extends StandardMessageCodec {
  const _ParticipantApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is UserData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      case 129: 
        return UserData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ParticipantApi {
  /// Constructor for [ParticipantApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ParticipantApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ParticipantApiCodec();

  Future<UserData> getUser(String arg_conversationSid, String arg_participantSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ParticipantApi.getUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_participantSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UserData?)!;
    }
  }

  Future<void> setAttributes(String arg_conversationSid, String arg_participantSid, AttributesData arg_attributes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ParticipantApi.setAttributes', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_participantSid, arg_attributes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> remove(String arg_conversationSid, String arg_participantSid) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.ParticipantApi.remove', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_participantSid]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MessageApiCodec extends StandardMessageCodec {
  const _MessageApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DeliveryReceiptData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is DetailedDeliveryReceiptData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ParticipantData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      case 129: 
        return DeliveryReceiptData.decode(readValue(buffer)!);
      case 130: 
        return DetailedDeliveryReceiptData.decode(readValue(buffer)!);
      case 131: 
        return ParticipantData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MessageApi {
  /// Constructor for [MessageApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MessageApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MessageApiCodec();

  Future<String> getMediaContentTemporaryUrl(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.getMediaContentTemporaryUrl', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<ParticipantData> getParticipant(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.getParticipant', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ParticipantData?)!;
    }
  }

  Future<void> setAttributes(String arg_conversationSid, int arg_messageIndex, AttributesData arg_attributes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.setAttributes', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex, arg_attributes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateMessageBody(String arg_conversationSid, int arg_messageIndex, String arg_messageBody) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.updateMessageBody', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex, arg_messageBody]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<DeliveryReceiptData> getAggregatedDeliveryReceipt(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.getAggregatedDeliveryReceipt', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DeliveryReceiptData?)!;
    }
  }

  Future<List<DetailedDeliveryReceiptData?>> getDetailedDeliveryReceiptList(String arg_conversationSid, int arg_messageIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.MessageApi.getDetailedDeliveryReceiptList', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_conversationSid, arg_messageIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<DetailedDeliveryReceiptData?>();
    }
  }
}

class _UserApiCodec extends StandardMessageCodec {
  const _UserApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class UserApi {
  /// Constructor for [UserApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UserApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _UserApiCodec();

  Future<void> setFriendlyName(String arg_identity, String arg_friendlyName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.UserApi.setFriendlyName', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_identity, arg_friendlyName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAttributes(String arg_identity, AttributesData arg_attributes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.twilio_conversations.UserApi.setAttributes', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_identity, arg_attributes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterConversationClientApiCodec extends StandardMessageCodec {
  const _FlutterConversationClientApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AttributesData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ConversationData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ConversationUpdatedData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ErrorInfoData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MessageData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is MessageMediaData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ParticipantData) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is UserData) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AttributesData.decode(readValue(buffer)!);
      case 129: 
        return ConversationData.decode(readValue(buffer)!);
      case 130: 
        return ConversationUpdatedData.decode(readValue(buffer)!);
      case 131: 
        return ErrorInfoData.decode(readValue(buffer)!);
      case 132: 
        return MessageData.decode(readValue(buffer)!);
      case 133: 
        return MessageMediaData.decode(readValue(buffer)!);
      case 134: 
        return ParticipantData.decode(readValue(buffer)!);
      case 135: 
        return UserData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterConversationClientApi {
  static const MessageCodec<Object?> codec = _FlutterConversationClientApiCodec();

  void error(ErrorInfoData errorInfoData);

  void conversationAdded(ConversationData conversationData);

  void conversationUpdated(ConversationUpdatedData event);

  void conversationDeleted(ConversationData conversationData);

  void clientSynchronization(String synchronizationStatus);

  void conversationSynchronizationChange(ConversationData conversationData);

  void connectionStateChange(String connectionState);

  void tokenAboutToExpire();

  void tokenExpired();

  void userSubscribed(UserData userData);

  void userUnsubscribed(UserData userData);

  void userUpdated(UserData userData, String reason);

  void addedToConversationNotification(String conversationSid);

  void newMessageNotification(String conversationSid, int messageIndex);

  void notificationSubscribed();

  void notificationFailed(ErrorInfoData errorInfoData);

  void removedFromConversationNotification(String conversationSid);

  void registered();

  void registrationFailed(ErrorInfoData errorInfoData);

  void deregistered();

  void deregistrationFailed(ErrorInfoData errorInfoData);

  void messageAdded(String conversationSid, MessageData messageData);

  void messageUpdated(String conversationSid, MessageData messageData, String reason);

  void messageDeleted(String conversationSid, MessageData messageData);

  void participantAdded(String conversationSid, ParticipantData participantData);

  void participantUpdated(String conversationSid, ParticipantData participantData, String reason);

  void participantDeleted(String conversationSid, ParticipantData participantData);

  void typingStarted(String conversationSid, ConversationData conversationData, ParticipantData participantData);

  void typingEnded(String conversationSid, ConversationData conversationData, ParticipantData participantData);

  void synchronizationChanged(String conversationSid, ConversationData conversationData);

  static void setup(FlutterConversationClientApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.error', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.error was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ErrorInfoData? arg_errorInfoData = (args[0] as ErrorInfoData?);
          assert(arg_errorInfoData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.error was null, expected non-null ErrorInfoData.');
          api.error(arg_errorInfoData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConversationData? arg_conversationData = (args[0] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationAdded was null, expected non-null ConversationData.');
          api.conversationAdded(arg_conversationData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConversationUpdatedData? arg_event = (args[0] as ConversationUpdatedData?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationUpdated was null, expected non-null ConversationUpdatedData.');
          api.conversationUpdated(arg_event!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationDeleted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationDeleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConversationData? arg_conversationData = (args[0] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationDeleted was null, expected non-null ConversationData.');
          api.conversationDeleted(arg_conversationData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.clientSynchronization', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.clientSynchronization was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_synchronizationStatus = (args[0] as String?);
          assert(arg_synchronizationStatus != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.clientSynchronization was null, expected non-null String.');
          api.clientSynchronization(arg_synchronizationStatus!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationSynchronizationChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationSynchronizationChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConversationData? arg_conversationData = (args[0] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationSynchronizationChange was null, expected non-null ConversationData.');
          api.conversationSynchronizationChange(arg_conversationData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.connectionStateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.connectionStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_connectionState = (args[0] as String?);
          assert(arg_connectionState != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.connectionStateChange was null, expected non-null String.');
          api.connectionStateChange(arg_connectionState!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.tokenAboutToExpire', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.tokenAboutToExpire();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.tokenExpired', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.tokenExpired();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userSubscribed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userSubscribed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UserData? arg_userData = (args[0] as UserData?);
          assert(arg_userData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userSubscribed was null, expected non-null UserData.');
          api.userSubscribed(arg_userData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUnsubscribed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUnsubscribed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UserData? arg_userData = (args[0] as UserData?);
          assert(arg_userData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUnsubscribed was null, expected non-null UserData.');
          api.userUnsubscribed(arg_userData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final UserData? arg_userData = (args[0] as UserData?);
          assert(arg_userData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUpdated was null, expected non-null UserData.');
          final String? arg_reason = (args[1] as String?);
          assert(arg_reason != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUpdated was null, expected non-null String.');
          api.userUpdated(arg_userData!, arg_reason!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.addedToConversationNotification', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.addedToConversationNotification was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.addedToConversationNotification was null, expected non-null String.');
          api.addedToConversationNotification(arg_conversationSid!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.newMessageNotification', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.newMessageNotification was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.newMessageNotification was null, expected non-null String.');
          final int? arg_messageIndex = (args[1] as int?);
          assert(arg_messageIndex != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.newMessageNotification was null, expected non-null int.');
          api.newMessageNotification(arg_conversationSid!, arg_messageIndex!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationSubscribed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.notificationSubscribed();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationFailed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationFailed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ErrorInfoData? arg_errorInfoData = (args[0] as ErrorInfoData?);
          assert(arg_errorInfoData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationFailed was null, expected non-null ErrorInfoData.');
          api.notificationFailed(arg_errorInfoData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.removedFromConversationNotification', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.removedFromConversationNotification was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.removedFromConversationNotification was null, expected non-null String.');
          api.removedFromConversationNotification(arg_conversationSid!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registered', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.registered();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registrationFailed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registrationFailed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ErrorInfoData? arg_errorInfoData = (args[0] as ErrorInfoData?);
          assert(arg_errorInfoData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registrationFailed was null, expected non-null ErrorInfoData.');
          api.registrationFailed(arg_errorInfoData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistered', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.deregistered();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistrationFailed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistrationFailed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ErrorInfoData? arg_errorInfoData = (args[0] as ErrorInfoData?);
          assert(arg_errorInfoData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistrationFailed was null, expected non-null ErrorInfoData.');
          api.deregistrationFailed(arg_errorInfoData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageAdded was null, expected non-null String.');
          final MessageData? arg_messageData = (args[1] as MessageData?);
          assert(arg_messageData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageAdded was null, expected non-null MessageData.');
          api.messageAdded(arg_conversationSid!, arg_messageData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated was null, expected non-null String.');
          final MessageData? arg_messageData = (args[1] as MessageData?);
          assert(arg_messageData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated was null, expected non-null MessageData.');
          final String? arg_reason = (args[2] as String?);
          assert(arg_reason != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated was null, expected non-null String.');
          api.messageUpdated(arg_conversationSid!, arg_messageData!, arg_reason!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageDeleted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageDeleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageDeleted was null, expected non-null String.');
          final MessageData? arg_messageData = (args[1] as MessageData?);
          assert(arg_messageData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageDeleted was null, expected non-null MessageData.');
          api.messageDeleted(arg_conversationSid!, arg_messageData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantAdded was null, expected non-null String.');
          final ParticipantData? arg_participantData = (args[1] as ParticipantData?);
          assert(arg_participantData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantAdded was null, expected non-null ParticipantData.');
          api.participantAdded(arg_conversationSid!, arg_participantData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated was null, expected non-null String.');
          final ParticipantData? arg_participantData = (args[1] as ParticipantData?);
          assert(arg_participantData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated was null, expected non-null ParticipantData.');
          final String? arg_reason = (args[2] as String?);
          assert(arg_reason != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated was null, expected non-null String.');
          api.participantUpdated(arg_conversationSid!, arg_participantData!, arg_reason!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantDeleted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantDeleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantDeleted was null, expected non-null String.');
          final ParticipantData? arg_participantData = (args[1] as ParticipantData?);
          assert(arg_participantData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantDeleted was null, expected non-null ParticipantData.');
          api.participantDeleted(arg_conversationSid!, arg_participantData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted was null, expected non-null String.');
          final ConversationData? arg_conversationData = (args[1] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted was null, expected non-null ConversationData.');
          final ParticipantData? arg_participantData = (args[2] as ParticipantData?);
          assert(arg_participantData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted was null, expected non-null ParticipantData.');
          api.typingStarted(arg_conversationSid!, arg_conversationData!, arg_participantData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded was null, expected non-null String.');
          final ConversationData? arg_conversationData = (args[1] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded was null, expected non-null ConversationData.');
          final ParticipantData? arg_participantData = (args[2] as ParticipantData?);
          assert(arg_participantData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded was null, expected non-null ParticipantData.');
          api.typingEnded(arg_conversationSid!, arg_conversationData!, arg_participantData!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.synchronizationChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.synchronizationChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_conversationSid = (args[0] as String?);
          assert(arg_conversationSid != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.synchronizationChanged was null, expected non-null String.');
          final ConversationData? arg_conversationData = (args[1] as ConversationData?);
          assert(arg_conversationData != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.synchronizationChanged was null, expected non-null ConversationData.');
          api.synchronizationChanged(arg_conversationSid!, arg_conversationData!);
          return;
        });
      }
    }
  }
}

abstract class FlutterLoggingApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void logFromHost(String msg);

  static void setup(FlutterLoggingApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.twilio_conversations.FlutterLoggingApi.logFromHost', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.twilio_conversations.FlutterLoggingApi.logFromHost was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_msg = (args[0] as String?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.twilio_conversations.FlutterLoggingApi.logFromHost was null, expected non-null String.');
          api.logFromHost(arg_msg!);
          return;
        });
      }
    }
  }
}
