// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface TWCONConversationClientData ()
+ (TWCONConversationClientData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONPropertiesData ()
+ (TWCONPropertiesData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONConversationData ()
+ (TWCONConversationData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONAttributesData ()
+ (TWCONAttributesData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONTokenData ()
+ (TWCONTokenData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageMediaData ()
+ (TWCONMessageMediaData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageData ()
+ (TWCONMessageData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageOptionsData ()
+ (TWCONMessageOptionsData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONParticipantData ()
+ (TWCONParticipantData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONDeliveryReceiptData ()
+ (TWCONDeliveryReceiptData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONDetailedDeliveryReceiptData ()
+ (TWCONDetailedDeliveryReceiptData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONUserData ()
+ (TWCONUserData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONMessageCount ()
+ (TWCONMessageCount *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONConversationUpdatedData ()
+ (TWCONConversationUpdatedData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface TWCONErrorInfoData ()
+ (TWCONErrorInfoData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation TWCONConversationClientData
+ (instancetype)makeWithMyIdentity:(nullable NSString *)myIdentity
    connectionState:(nullable NSString *)connectionState
    isReachabilityEnabled:(nullable NSNumber *)isReachabilityEnabled {
  TWCONConversationClientData* pigeonResult = [[TWCONConversationClientData alloc] init];
  pigeonResult.myIdentity = myIdentity;
  pigeonResult.connectionState = connectionState;
  pigeonResult.isReachabilityEnabled = isReachabilityEnabled;
  return pigeonResult;
}
+ (TWCONConversationClientData *)fromMap:(NSDictionary *)dict {
  TWCONConversationClientData *pigeonResult = [[TWCONConversationClientData alloc] init];
  pigeonResult.myIdentity = GetNullableObject(dict, @"myIdentity");
  pigeonResult.connectionState = GetNullableObject(dict, @"connectionState");
  pigeonResult.isReachabilityEnabled = GetNullableObject(dict, @"isReachabilityEnabled");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.myIdentity ? self.myIdentity : [NSNull null]), @"myIdentity", (self.connectionState ? self.connectionState : [NSNull null]), @"connectionState", (self.isReachabilityEnabled ? self.isReachabilityEnabled : [NSNull null]), @"isReachabilityEnabled", nil];
}
@end

@implementation TWCONPropertiesData
+ (instancetype)makeWithRegion:(nullable NSString *)region {
  TWCONPropertiesData* pigeonResult = [[TWCONPropertiesData alloc] init];
  pigeonResult.region = region;
  return pigeonResult;
}
+ (TWCONPropertiesData *)fromMap:(NSDictionary *)dict {
  TWCONPropertiesData *pigeonResult = [[TWCONPropertiesData alloc] init];
  pigeonResult.region = GetNullableObject(dict, @"region");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.region ? self.region : [NSNull null]), @"region", nil];
}
@end

@implementation TWCONConversationData
+ (instancetype)makeWithSid:(nullable NSString *)sid
    attributes:(nullable TWCONAttributesData *)attributes
    uniqueName:(nullable NSString *)uniqueName
    friendlyName:(nullable NSString *)friendlyName
    status:(nullable NSString *)status
    synchronizationStatus:(nullable NSString *)synchronizationStatus
    dateCreated:(nullable NSString *)dateCreated
    createdBy:(nullable NSString *)createdBy
    dateUpdated:(nullable NSString *)dateUpdated
    lastMessageDate:(nullable NSString *)lastMessageDate
    lastReadMessageIndex:(nullable NSNumber *)lastReadMessageIndex
    lastMessageIndex:(nullable NSNumber *)lastMessageIndex {
  TWCONConversationData* pigeonResult = [[TWCONConversationData alloc] init];
  pigeonResult.sid = sid;
  pigeonResult.attributes = attributes;
  pigeonResult.uniqueName = uniqueName;
  pigeonResult.friendlyName = friendlyName;
  pigeonResult.status = status;
  pigeonResult.synchronizationStatus = synchronizationStatus;
  pigeonResult.dateCreated = dateCreated;
  pigeonResult.createdBy = createdBy;
  pigeonResult.dateUpdated = dateUpdated;
  pigeonResult.lastMessageDate = lastMessageDate;
  pigeonResult.lastReadMessageIndex = lastReadMessageIndex;
  pigeonResult.lastMessageIndex = lastMessageIndex;
  return pigeonResult;
}
+ (TWCONConversationData *)fromMap:(NSDictionary *)dict {
  TWCONConversationData *pigeonResult = [[TWCONConversationData alloc] init];
  pigeonResult.sid = GetNullableObject(dict, @"sid");
  pigeonResult.attributes = [TWCONAttributesData fromMap:GetNullableObject(dict, @"attributes")];
  pigeonResult.uniqueName = GetNullableObject(dict, @"uniqueName");
  pigeonResult.friendlyName = GetNullableObject(dict, @"friendlyName");
  pigeonResult.status = GetNullableObject(dict, @"status");
  pigeonResult.synchronizationStatus = GetNullableObject(dict, @"synchronizationStatus");
  pigeonResult.dateCreated = GetNullableObject(dict, @"dateCreated");
  pigeonResult.createdBy = GetNullableObject(dict, @"createdBy");
  pigeonResult.dateUpdated = GetNullableObject(dict, @"dateUpdated");
  pigeonResult.lastMessageDate = GetNullableObject(dict, @"lastMessageDate");
  pigeonResult.lastReadMessageIndex = GetNullableObject(dict, @"lastReadMessageIndex");
  pigeonResult.lastMessageIndex = GetNullableObject(dict, @"lastMessageIndex");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.uniqueName ? self.uniqueName : [NSNull null]), @"uniqueName", (self.friendlyName ? self.friendlyName : [NSNull null]), @"friendlyName", (self.status ? self.status : [NSNull null]), @"status", (self.synchronizationStatus ? self.synchronizationStatus : [NSNull null]), @"synchronizationStatus", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.createdBy ? self.createdBy : [NSNull null]), @"createdBy", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.lastMessageDate ? self.lastMessageDate : [NSNull null]), @"lastMessageDate", (self.lastReadMessageIndex ? self.lastReadMessageIndex : [NSNull null]), @"lastReadMessageIndex", (self.lastMessageIndex ? self.lastMessageIndex : [NSNull null]), @"lastMessageIndex", nil];
}
@end

@implementation TWCONAttributesData
+ (instancetype)makeWithType:(nullable NSString *)type
    data:(nullable NSString *)data {
  TWCONAttributesData* pigeonResult = [[TWCONAttributesData alloc] init];
  pigeonResult.type = type;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (TWCONAttributesData *)fromMap:(NSDictionary *)dict {
  TWCONAttributesData *pigeonResult = [[TWCONAttributesData alloc] init];
  pigeonResult.type = GetNullableObject(dict, @"type");
  pigeonResult.data = GetNullableObject(dict, @"data");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.type ? self.type : [NSNull null]), @"type", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation TWCONTokenData
+ (instancetype)makeWithToken:(nullable NSString *)token {
  TWCONTokenData* pigeonResult = [[TWCONTokenData alloc] init];
  pigeonResult.token = token;
  return pigeonResult;
}
+ (TWCONTokenData *)fromMap:(NSDictionary *)dict {
  TWCONTokenData *pigeonResult = [[TWCONTokenData alloc] init];
  pigeonResult.token = GetNullableObject(dict, @"token");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.token ? self.token : [NSNull null]), @"token", nil];
}
@end

@implementation TWCONMessageMediaData
+ (instancetype)makeWithSid:(nullable NSString *)sid
    fileName:(nullable NSString *)fileName
    type:(nullable NSString *)type
    size:(nullable NSNumber *)size
    conversationSid:(nullable NSString *)conversationSid
    messageSid:(nullable NSString *)messageSid
    messageIndex:(nullable NSNumber *)messageIndex {
  TWCONMessageMediaData* pigeonResult = [[TWCONMessageMediaData alloc] init];
  pigeonResult.sid = sid;
  pigeonResult.fileName = fileName;
  pigeonResult.type = type;
  pigeonResult.size = size;
  pigeonResult.conversationSid = conversationSid;
  pigeonResult.messageSid = messageSid;
  pigeonResult.messageIndex = messageIndex;
  return pigeonResult;
}
+ (TWCONMessageMediaData *)fromMap:(NSDictionary *)dict {
  TWCONMessageMediaData *pigeonResult = [[TWCONMessageMediaData alloc] init];
  pigeonResult.sid = GetNullableObject(dict, @"sid");
  pigeonResult.fileName = GetNullableObject(dict, @"fileName");
  pigeonResult.type = GetNullableObject(dict, @"type");
  pigeonResult.size = GetNullableObject(dict, @"size");
  pigeonResult.conversationSid = GetNullableObject(dict, @"conversationSid");
  pigeonResult.messageSid = GetNullableObject(dict, @"messageSid");
  pigeonResult.messageIndex = GetNullableObject(dict, @"messageIndex");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.fileName ? self.fileName : [NSNull null]), @"fileName", (self.type ? self.type : [NSNull null]), @"type", (self.size ? self.size : [NSNull null]), @"size", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.messageSid ? self.messageSid : [NSNull null]), @"messageSid", (self.messageIndex ? self.messageIndex : [NSNull null]), @"messageIndex", nil];
}
@end

@implementation TWCONMessageData
+ (instancetype)makeWithSid:(nullable NSString *)sid
    messageIndex:(nullable NSNumber *)messageIndex
    author:(nullable NSString *)author
    subject:(nullable NSString *)subject
    messageBody:(nullable NSString *)messageBody
    type:(nullable NSString *)type
    hasMedia:(nullable NSNumber *)hasMedia
    media:(nullable TWCONMessageMediaData *)media
    conversationSid:(nullable NSString *)conversationSid
    participantSid:(nullable NSString *)participantSid
    dateCreated:(nullable NSString *)dateCreated
    dateUpdated:(nullable NSString *)dateUpdated
    lastUpdatedBy:(nullable NSString *)lastUpdatedBy
    attributes:(nullable TWCONAttributesData *)attributes {
  TWCONMessageData* pigeonResult = [[TWCONMessageData alloc] init];
  pigeonResult.sid = sid;
  pigeonResult.messageIndex = messageIndex;
  pigeonResult.author = author;
  pigeonResult.subject = subject;
  pigeonResult.messageBody = messageBody;
  pigeonResult.type = type;
  pigeonResult.hasMedia = hasMedia;
  pigeonResult.media = media;
  pigeonResult.conversationSid = conversationSid;
  pigeonResult.participantSid = participantSid;
  pigeonResult.dateCreated = dateCreated;
  pigeonResult.dateUpdated = dateUpdated;
  pigeonResult.lastUpdatedBy = lastUpdatedBy;
  pigeonResult.attributes = attributes;
  return pigeonResult;
}
+ (TWCONMessageData *)fromMap:(NSDictionary *)dict {
  TWCONMessageData *pigeonResult = [[TWCONMessageData alloc] init];
  pigeonResult.sid = GetNullableObject(dict, @"sid");
  pigeonResult.messageIndex = GetNullableObject(dict, @"messageIndex");
  pigeonResult.author = GetNullableObject(dict, @"author");
  pigeonResult.subject = GetNullableObject(dict, @"subject");
  pigeonResult.messageBody = GetNullableObject(dict, @"messageBody");
  pigeonResult.type = GetNullableObject(dict, @"type");
  pigeonResult.hasMedia = GetNullableObject(dict, @"hasMedia");
  pigeonResult.media = [TWCONMessageMediaData fromMap:GetNullableObject(dict, @"media")];
  pigeonResult.conversationSid = GetNullableObject(dict, @"conversationSid");
  pigeonResult.participantSid = GetNullableObject(dict, @"participantSid");
  pigeonResult.dateCreated = GetNullableObject(dict, @"dateCreated");
  pigeonResult.dateUpdated = GetNullableObject(dict, @"dateUpdated");
  pigeonResult.lastUpdatedBy = GetNullableObject(dict, @"lastUpdatedBy");
  pigeonResult.attributes = [TWCONAttributesData fromMap:GetNullableObject(dict, @"attributes")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.messageIndex ? self.messageIndex : [NSNull null]), @"messageIndex", (self.author ? self.author : [NSNull null]), @"author", (self.subject ? self.subject : [NSNull null]), @"subject", (self.messageBody ? self.messageBody : [NSNull null]), @"messageBody", (self.type ? self.type : [NSNull null]), @"type", (self.hasMedia ? self.hasMedia : [NSNull null]), @"hasMedia", (self.media ? [self.media toMap] : [NSNull null]), @"media", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.participantSid ? self.participantSid : [NSNull null]), @"participantSid", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.lastUpdatedBy ? self.lastUpdatedBy : [NSNull null]), @"lastUpdatedBy", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", nil];
}
@end

@implementation TWCONMessageOptionsData
+ (instancetype)makeWithBody:(nullable NSString *)body
    attributes:(nullable TWCONAttributesData *)attributes
    mimeType:(nullable NSString *)mimeType
    filename:(nullable NSString *)filename
    inputPath:(nullable NSString *)inputPath
    mediaProgressListenerId:(nullable NSNumber *)mediaProgressListenerId {
  TWCONMessageOptionsData* pigeonResult = [[TWCONMessageOptionsData alloc] init];
  pigeonResult.body = body;
  pigeonResult.attributes = attributes;
  pigeonResult.mimeType = mimeType;
  pigeonResult.filename = filename;
  pigeonResult.inputPath = inputPath;
  pigeonResult.mediaProgressListenerId = mediaProgressListenerId;
  return pigeonResult;
}
+ (TWCONMessageOptionsData *)fromMap:(NSDictionary *)dict {
  TWCONMessageOptionsData *pigeonResult = [[TWCONMessageOptionsData alloc] init];
  pigeonResult.body = GetNullableObject(dict, @"body");
  pigeonResult.attributes = [TWCONAttributesData fromMap:GetNullableObject(dict, @"attributes")];
  pigeonResult.mimeType = GetNullableObject(dict, @"mimeType");
  pigeonResult.filename = GetNullableObject(dict, @"filename");
  pigeonResult.inputPath = GetNullableObject(dict, @"inputPath");
  pigeonResult.mediaProgressListenerId = GetNullableObject(dict, @"mediaProgressListenerId");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.body ? self.body : [NSNull null]), @"body", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.mimeType ? self.mimeType : [NSNull null]), @"mimeType", (self.filename ? self.filename : [NSNull null]), @"filename", (self.inputPath ? self.inputPath : [NSNull null]), @"inputPath", (self.mediaProgressListenerId ? self.mediaProgressListenerId : [NSNull null]), @"mediaProgressListenerId", nil];
}
@end

@implementation TWCONParticipantData
+ (instancetype)makeWithSid:(nullable NSString *)sid
    conversationSid:(nullable NSString *)conversationSid
    type:(nullable NSString *)type
    attributes:(nullable TWCONAttributesData *)attributes
    dateCreated:(nullable NSString *)dateCreated
    dateUpdated:(nullable NSString *)dateUpdated
    identity:(nullable NSString *)identity
    lastReadMessageIndex:(nullable NSNumber *)lastReadMessageIndex
    lastReadTimestamp:(nullable NSString *)lastReadTimestamp {
  TWCONParticipantData* pigeonResult = [[TWCONParticipantData alloc] init];
  pigeonResult.sid = sid;
  pigeonResult.conversationSid = conversationSid;
  pigeonResult.type = type;
  pigeonResult.attributes = attributes;
  pigeonResult.dateCreated = dateCreated;
  pigeonResult.dateUpdated = dateUpdated;
  pigeonResult.identity = identity;
  pigeonResult.lastReadMessageIndex = lastReadMessageIndex;
  pigeonResult.lastReadTimestamp = lastReadTimestamp;
  return pigeonResult;
}
+ (TWCONParticipantData *)fromMap:(NSDictionary *)dict {
  TWCONParticipantData *pigeonResult = [[TWCONParticipantData alloc] init];
  pigeonResult.sid = GetNullableObject(dict, @"sid");
  pigeonResult.conversationSid = GetNullableObject(dict, @"conversationSid");
  pigeonResult.type = GetNullableObject(dict, @"type");
  pigeonResult.attributes = [TWCONAttributesData fromMap:GetNullableObject(dict, @"attributes")];
  pigeonResult.dateCreated = GetNullableObject(dict, @"dateCreated");
  pigeonResult.dateUpdated = GetNullableObject(dict, @"dateUpdated");
  pigeonResult.identity = GetNullableObject(dict, @"identity");
  pigeonResult.lastReadMessageIndex = GetNullableObject(dict, @"lastReadMessageIndex");
  pigeonResult.lastReadTimestamp = GetNullableObject(dict, @"lastReadTimestamp");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sid ? self.sid : [NSNull null]), @"sid", (self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.type ? self.type : [NSNull null]), @"type", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.dateCreated ? self.dateCreated : [NSNull null]), @"dateCreated", (self.dateUpdated ? self.dateUpdated : [NSNull null]), @"dateUpdated", (self.identity ? self.identity : [NSNull null]), @"identity", (self.lastReadMessageIndex ? self.lastReadMessageIndex : [NSNull null]), @"lastReadMessageIndex", (self.lastReadTimestamp ? self.lastReadTimestamp : [NSNull null]), @"lastReadTimestamp", nil];
}
@end

@implementation TWCONDeliveryReceiptData
+ (instancetype)makeWithTotal:(nullable NSNumber *)total
    read:(nullable NSString *)read
    undelivered:(nullable NSString *)undelivered
    delivered:(nullable NSString *)delivered
    failed:(nullable NSString *)failed
    sent:(nullable NSString *)sent {
  TWCONDeliveryReceiptData* pigeonResult = [[TWCONDeliveryReceiptData alloc] init];
  pigeonResult.total = total;
  pigeonResult.read = read;
  pigeonResult.undelivered = undelivered;
  pigeonResult.delivered = delivered;
  pigeonResult.failed = failed;
  pigeonResult.sent = sent;
  return pigeonResult;
}
+ (TWCONDeliveryReceiptData *)fromMap:(NSDictionary *)dict {
  TWCONDeliveryReceiptData *pigeonResult = [[TWCONDeliveryReceiptData alloc] init];
  pigeonResult.total = GetNullableObject(dict, @"total");
  pigeonResult.read = GetNullableObject(dict, @"read");
  pigeonResult.undelivered = GetNullableObject(dict, @"undelivered");
  pigeonResult.delivered = GetNullableObject(dict, @"delivered");
  pigeonResult.failed = GetNullableObject(dict, @"failed");
  pigeonResult.sent = GetNullableObject(dict, @"sent");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.total ? self.total : [NSNull null]), @"total", (self.read ? self.read : [NSNull null]), @"read", (self.undelivered ? self.undelivered : [NSNull null]), @"undelivered", (self.delivered ? self.delivered : [NSNull null]), @"delivered", (self.failed ? self.failed : [NSNull null]), @"failed", (self.sent ? self.sent : [NSNull null]), @"sent", nil];
}
@end

@implementation TWCONDetailedDeliveryReceiptData
+ (instancetype)makeWithConversationSid:(nullable NSString *)conversationSid
    channelMessageSid:(nullable NSString *)channelMessageSid
    dateCreatedAsDate:(nullable NSString *)dateCreatedAsDate
    dateUpdatedAsDate:(nullable NSString *)dateUpdatedAsDate
    errorCode:(nullable NSNumber *)errorCode
    messageSid:(nullable NSString *)messageSid
    participantSid:(nullable NSString *)participantSid
    sid:(nullable NSString *)sid {
  TWCONDetailedDeliveryReceiptData* pigeonResult = [[TWCONDetailedDeliveryReceiptData alloc] init];
  pigeonResult.conversationSid = conversationSid;
  pigeonResult.channelMessageSid = channelMessageSid;
  pigeonResult.dateCreatedAsDate = dateCreatedAsDate;
  pigeonResult.dateUpdatedAsDate = dateUpdatedAsDate;
  pigeonResult.errorCode = errorCode;
  pigeonResult.messageSid = messageSid;
  pigeonResult.participantSid = participantSid;
  pigeonResult.sid = sid;
  return pigeonResult;
}
+ (TWCONDetailedDeliveryReceiptData *)fromMap:(NSDictionary *)dict {
  TWCONDetailedDeliveryReceiptData *pigeonResult = [[TWCONDetailedDeliveryReceiptData alloc] init];
  pigeonResult.conversationSid = GetNullableObject(dict, @"conversationSid");
  pigeonResult.channelMessageSid = GetNullableObject(dict, @"channelMessageSid");
  pigeonResult.dateCreatedAsDate = GetNullableObject(dict, @"dateCreatedAsDate");
  pigeonResult.dateUpdatedAsDate = GetNullableObject(dict, @"dateUpdatedAsDate");
  pigeonResult.errorCode = GetNullableObject(dict, @"errorCode");
  pigeonResult.messageSid = GetNullableObject(dict, @"messageSid");
  pigeonResult.participantSid = GetNullableObject(dict, @"participantSid");
  pigeonResult.sid = GetNullableObject(dict, @"sid");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.conversationSid ? self.conversationSid : [NSNull null]), @"conversationSid", (self.channelMessageSid ? self.channelMessageSid : [NSNull null]), @"channelMessageSid", (self.dateCreatedAsDate ? self.dateCreatedAsDate : [NSNull null]), @"dateCreatedAsDate", (self.dateUpdatedAsDate ? self.dateUpdatedAsDate : [NSNull null]), @"dateUpdatedAsDate", (self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.messageSid ? self.messageSid : [NSNull null]), @"messageSid", (self.participantSid ? self.participantSid : [NSNull null]), @"participantSid", (self.sid ? self.sid : [NSNull null]), @"sid", nil];
}
@end

@implementation TWCONUserData
+ (instancetype)makeWithIdentity:(nullable NSString *)identity
    attributes:(nullable TWCONAttributesData *)attributes
    friendlyName:(nullable NSString *)friendlyName
    isNotifiable:(nullable NSNumber *)isNotifiable
    isOnline:(nullable NSNumber *)isOnline
    isSubscribed:(nullable NSNumber *)isSubscribed {
  TWCONUserData* pigeonResult = [[TWCONUserData alloc] init];
  pigeonResult.identity = identity;
  pigeonResult.attributes = attributes;
  pigeonResult.friendlyName = friendlyName;
  pigeonResult.isNotifiable = isNotifiable;
  pigeonResult.isOnline = isOnline;
  pigeonResult.isSubscribed = isSubscribed;
  return pigeonResult;
}
+ (TWCONUserData *)fromMap:(NSDictionary *)dict {
  TWCONUserData *pigeonResult = [[TWCONUserData alloc] init];
  pigeonResult.identity = GetNullableObject(dict, @"identity");
  pigeonResult.attributes = [TWCONAttributesData fromMap:GetNullableObject(dict, @"attributes")];
  pigeonResult.friendlyName = GetNullableObject(dict, @"friendlyName");
  pigeonResult.isNotifiable = GetNullableObject(dict, @"isNotifiable");
  pigeonResult.isOnline = GetNullableObject(dict, @"isOnline");
  pigeonResult.isSubscribed = GetNullableObject(dict, @"isSubscribed");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.identity ? self.identity : [NSNull null]), @"identity", (self.attributes ? [self.attributes toMap] : [NSNull null]), @"attributes", (self.friendlyName ? self.friendlyName : [NSNull null]), @"friendlyName", (self.isNotifiable ? self.isNotifiable : [NSNull null]), @"isNotifiable", (self.isOnline ? self.isOnline : [NSNull null]), @"isOnline", (self.isSubscribed ? self.isSubscribed : [NSNull null]), @"isSubscribed", nil];
}
@end

@implementation TWCONMessageCount
+ (instancetype)makeWithCount:(nullable NSNumber *)count {
  TWCONMessageCount* pigeonResult = [[TWCONMessageCount alloc] init];
  pigeonResult.count = count;
  return pigeonResult;
}
+ (TWCONMessageCount *)fromMap:(NSDictionary *)dict {
  TWCONMessageCount *pigeonResult = [[TWCONMessageCount alloc] init];
  pigeonResult.count = GetNullableObject(dict, @"count");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.count ? self.count : [NSNull null]), @"count", nil];
}
@end

@implementation TWCONConversationUpdatedData
+ (instancetype)makeWithConversation:(nullable TWCONConversationData *)conversation
    reason:(nullable NSString *)reason {
  TWCONConversationUpdatedData* pigeonResult = [[TWCONConversationUpdatedData alloc] init];
  pigeonResult.conversation = conversation;
  pigeonResult.reason = reason;
  return pigeonResult;
}
+ (TWCONConversationUpdatedData *)fromMap:(NSDictionary *)dict {
  TWCONConversationUpdatedData *pigeonResult = [[TWCONConversationUpdatedData alloc] init];
  pigeonResult.conversation = [TWCONConversationData fromMap:GetNullableObject(dict, @"conversation")];
  pigeonResult.reason = GetNullableObject(dict, @"reason");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.conversation ? [self.conversation toMap] : [NSNull null]), @"conversation", (self.reason ? self.reason : [NSNull null]), @"reason", nil];
}
@end

@implementation TWCONErrorInfoData
+ (instancetype)makeWithCode:(nullable NSNumber *)code
    message:(nullable NSString *)message
    status:(nullable NSNumber *)status {
  TWCONErrorInfoData* pigeonResult = [[TWCONErrorInfoData alloc] init];
  pigeonResult.code = code;
  pigeonResult.message = message;
  pigeonResult.status = status;
  return pigeonResult;
}
+ (TWCONErrorInfoData *)fromMap:(NSDictionary *)dict {
  TWCONErrorInfoData *pigeonResult = [[TWCONErrorInfoData alloc] init];
  pigeonResult.code = GetNullableObject(dict, @"code");
  pigeonResult.message = GetNullableObject(dict, @"message");
  pigeonResult.status = GetNullableObject(dict, @"status");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.code ? self.code : [NSNull null]), @"code", (self.message ? self.message : [NSNull null]), @"message", (self.status ? self.status : [NSNull null]), @"status", nil];
}
@end

@interface TWCONPluginApiCodecReader : FlutterStandardReader
@end
@implementation TWCONPluginApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONConversationClientData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONPropertiesData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONPluginApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONPluginApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONConversationClientData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONPropertiesData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONPluginApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONPluginApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONPluginApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONPluginApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONPluginApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONPluginApiCodecReaderWriter *readerWriter = [[TWCONPluginApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONPluginApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONPluginApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PluginApi.debug"
        binaryMessenger:binaryMessenger
        codec:TWCONPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(debugEnableNative:enableSdk:error:)], @"TWCONPluginApi api (%@) doesn't respond to @selector(debugEnableNative:enableSdk:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enableNative = args[0];
        NSNumber *arg_enableSdk = args[1];
        FlutterError *error;
        [api debugEnableNative:arg_enableNative enableSdk:arg_enableSdk error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PluginApi.create"
        binaryMessenger:binaryMessenger
        codec:TWCONPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createJwtToken:properties:completion:)], @"TWCONPluginApi api (%@) doesn't respond to @selector(createJwtToken:properties:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_jwtToken = args[0];
        TWCONPropertiesData *arg_properties = args[1];
        [api createJwtToken:arg_jwtToken properties:arg_properties completion:^(TWCONConversationClientData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONConversationClientApiCodecReader : FlutterStandardReader
@end
@implementation TWCONConversationClientApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 130:     
      return [TWCONTokenData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONConversationClientApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONConversationClientApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONTokenData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONConversationClientApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONConversationClientApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONConversationClientApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONConversationClientApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONConversationClientApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONConversationClientApiCodecReaderWriter *readerWriter = [[TWCONConversationClientApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONConversationClientApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONConversationClientApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.updateToken"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateTokenToken:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(updateTokenToken:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_token = args[0];
        [api updateTokenToken:arg_token completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.shutdown"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(shutdownWithError:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(shutdownWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api shutdownWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.createConversation"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createConversationFriendlyName:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(createConversationFriendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_friendlyName = args[0];
        [api createConversationFriendlyName:arg_friendlyName completion:^(TWCONConversationData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getMyConversations"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMyConversationsWithCompletion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getMyConversationsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getMyConversationsWithCompletion:^(NSArray<TWCONConversationData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getConversation"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getConversationConversationSidOrUniqueName:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getConversationConversationSidOrUniqueName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSidOrUniqueName = args[0];
        [api getConversationConversationSidOrUniqueName:arg_conversationSidOrUniqueName completion:^(TWCONConversationData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.getMyUser"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMyUserWithCompletion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(getMyUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getMyUserWithCompletion:^(TWCONUserData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.registerForNotification"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerForNotificationTokenData:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(registerForNotificationTokenData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TWCONTokenData *arg_tokenData = args[0];
        [api registerForNotificationTokenData:arg_tokenData completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationClientApi.unregisterForNotification"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationClientApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(unregisterForNotificationTokenData:completion:)], @"TWCONConversationClientApi api (%@) doesn't respond to @selector(unregisterForNotificationTokenData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        TWCONTokenData *arg_tokenData = args[0];
        [api unregisterForNotificationTokenData:arg_tokenData completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONConversationApiCodecReader : FlutterStandardReader
@end
@implementation TWCONConversationApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONMessageCount fromMap:[self readValue]];
    
    case 130:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONMessageMediaData fromMap:[self readValue]];
    
    case 132:     
      return [TWCONMessageOptionsData fromMap:[self readValue]];
    
    case 133:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONConversationApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONConversationApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageCount class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageMediaData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageOptionsData class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONConversationApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONConversationApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONConversationApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONConversationApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONConversationApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONConversationApiCodecReaderWriter *readerWriter = [[TWCONConversationApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONConversationApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONConversationApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.join"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(joinConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(joinConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api joinConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.leave"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(leaveConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(leaveConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api leaveConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.destroy"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(destroyConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(destroyConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api destroyConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.typing"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(typingConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(typingConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api typingConversationSid:arg_conversationSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageConversationSid:options:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(sendMessageConversationSid:options:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        TWCONMessageOptionsData *arg_options = args[1];
        [api sendMessageConversationSid:arg_conversationSid options:arg_options completion:^(TWCONMessageData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.addParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(addParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api addParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeParticipant"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeParticipantConversationSid:participantSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeParticipantConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api removeParticipantConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api removeParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantByIdentity"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantByIdentityConversationSid:identity:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantByIdentityConversationSid:identity:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_identity = args[1];
        [api getParticipantByIdentityConversationSid:arg_conversationSid identity:arg_identity completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantBySid"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantBySidConversationSid:participantSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantBySidConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api getParticipantBySidConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantsList"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantsListConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantsListConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getParticipantsListConversationSid:arg_conversationSid completion:^(NSArray<TWCONParticipantData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getMessagesCountConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getUnreadMessagesCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUnreadMessagesCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getUnreadMessagesCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getUnreadMessagesCountConversationSid:arg_conversationSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.advanceLastReadMessageIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(advanceLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(advanceLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_lastReadMessageIndex = args[1];
        [api advanceLastReadMessageIndexConversationSid:arg_conversationSid lastReadMessageIndex:arg_lastReadMessageIndex completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setLastReadMessageIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setLastReadMessageIndexConversationSid:lastReadMessageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_lastReadMessageIndex = args[1];
        [api setLastReadMessageIndexConversationSid:arg_conversationSid lastReadMessageIndex:arg_lastReadMessageIndex completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAllMessagesRead"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAllMessagesReadConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAllMessagesReadConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api setAllMessagesReadConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAllMessagesUnread"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAllMessagesUnreadConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAllMessagesUnreadConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api setAllMessagesUnreadConversationSid:arg_conversationSid completion:^(TWCONMessageCount *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getParticipantsCount"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantsCountConversationSid:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getParticipantsCountConversationSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        [api getParticipantsCountConversationSid:arg_conversationSid completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesAfter"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesAfterConversationSid:index:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesAfterConversationSid:index:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_index = args[1];
        NSNumber *arg_count = args[2];
        [api getMessagesAfterConversationSid:arg_conversationSid index:arg_index count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessagesBefore"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessagesBeforeConversationSid:index:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessagesBeforeConversationSid:index:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_index = args[1];
        NSNumber *arg_count = args[2];
        [api getMessagesBeforeConversationSid:arg_conversationSid index:arg_index count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getMessageByIndex"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageByIndexConversationSid:messageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getMessageByIndexConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getMessageByIndexConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(TWCONMessageData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.getLastMessages"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLastMessagesConversationSid:count:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(getLastMessagesConversationSid:count:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_count = args[1];
        [api getLastMessagesConversationSid:arg_conversationSid count:arg_count completion:^(NSArray<TWCONMessageData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.removeMessage"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeMessageConversationSid:messageIndex:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(removeMessageConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api removeMessageConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:attributes:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setAttributesConversationSid:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        TWCONAttributesData *arg_attributes = args[1];
        [api setAttributesConversationSid:arg_conversationSid attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setFriendlyName"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFriendlyNameConversationSid:friendlyName:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setFriendlyNameConversationSid:friendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_friendlyName = args[1];
        [api setFriendlyNameConversationSid:arg_conversationSid friendlyName:arg_friendlyName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setNotificationLevel"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNotificationLevelConversationSid:notificationLevel:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setNotificationLevelConversationSid:notificationLevel:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_notificationLevel = args[1];
        [api setNotificationLevelConversationSid:arg_conversationSid notificationLevel:arg_notificationLevel completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ConversationApi.setUniqueName"
        binaryMessenger:binaryMessenger
        codec:TWCONConversationApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUniqueNameConversationSid:uniqueName:completion:)], @"TWCONConversationApi api (%@) doesn't respond to @selector(setUniqueNameConversationSid:uniqueName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_uniqueName = args[1];
        [api setUniqueNameConversationSid:arg_conversationSid uniqueName:arg_uniqueName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONParticipantApiCodecReader : FlutterStandardReader
@end
@implementation TWCONParticipantApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONParticipantApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONParticipantApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONParticipantApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONParticipantApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONParticipantApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONParticipantApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONParticipantApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONParticipantApiCodecReaderWriter *readerWriter = [[TWCONParticipantApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONParticipantApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONParticipantApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.getUser"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserConversationSid:participantSid:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(getUserConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api getUserConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(TWCONUserData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:participantSid:attributes:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(setAttributesConversationSid:participantSid:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        TWCONAttributesData *arg_attributes = args[2];
        [api setAttributesConversationSid:arg_conversationSid participantSid:arg_participantSid attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ParticipantApi.remove"
        binaryMessenger:binaryMessenger
        codec:TWCONParticipantApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeConversationSid:participantSid:completion:)], @"TWCONParticipantApi api (%@) doesn't respond to @selector(removeConversationSid:participantSid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSString *arg_participantSid = args[1];
        [api removeConversationSid:arg_conversationSid participantSid:arg_participantSid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONMessageApiCodecReader : FlutterStandardReader
@end
@implementation TWCONMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONDeliveryReceiptData fromMap:[self readValue]];
    
    case 130:     
      return [TWCONDetailedDeliveryReceiptData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONMessageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONDeliveryReceiptData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONDetailedDeliveryReceiptData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONMessageApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONMessageApiCodecReaderWriter *readerWriter = [[TWCONMessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONMessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getMediaContentTemporaryUrl"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMediaContentTemporaryUrlConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getMediaContentTemporaryUrlConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getMediaContentTemporaryUrlConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getParticipant"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getParticipantConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getParticipantConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getParticipantConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(TWCONParticipantData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesConversationSid:messageIndex:attributes:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(setAttributesConversationSid:messageIndex:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        TWCONAttributesData *arg_attributes = args[2];
        [api setAttributesConversationSid:arg_conversationSid messageIndex:arg_messageIndex attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.updateMessageBody"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateMessageBodyConversationSid:messageIndex:messageBody:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(updateMessageBodyConversationSid:messageIndex:messageBody:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        NSString *arg_messageBody = args[2];
        [api updateMessageBodyConversationSid:arg_conversationSid messageIndex:arg_messageIndex messageBody:arg_messageBody completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getAggregatedDeliveryReceipt"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAggregatedDeliveryReceiptConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getAggregatedDeliveryReceiptConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getAggregatedDeliveryReceiptConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(TWCONDeliveryReceiptData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.getDetailedDeliveryReceiptList"
        binaryMessenger:binaryMessenger
        codec:TWCONMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDetailedDeliveryReceiptListConversationSid:messageIndex:completion:)], @"TWCONMessageApi api (%@) doesn't respond to @selector(getDetailedDeliveryReceiptListConversationSid:messageIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_conversationSid = args[0];
        NSNumber *arg_messageIndex = args[1];
        [api getDetailedDeliveryReceiptListConversationSid:arg_conversationSid messageIndex:arg_messageIndex completion:^(NSArray<TWCONDetailedDeliveryReceiptData *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONUserApiCodecReader : FlutterStandardReader
@end
@implementation TWCONUserApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONUserApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONUserApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONUserApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONUserApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONUserApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONUserApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONUserApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONUserApiCodecReaderWriter *readerWriter = [[TWCONUserApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void TWCONUserApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TWCONUserApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserApi.setFriendlyName"
        binaryMessenger:binaryMessenger
        codec:TWCONUserApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFriendlyNameIdentity:friendlyName:completion:)], @"TWCONUserApi api (%@) doesn't respond to @selector(setFriendlyNameIdentity:friendlyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identity = args[0];
        NSString *arg_friendlyName = args[1];
        [api setFriendlyNameIdentity:arg_identity friendlyName:arg_friendlyName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.UserApi.setAttributes"
        binaryMessenger:binaryMessenger
        codec:TWCONUserApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAttributesIdentity:attributes:completion:)], @"TWCONUserApi api (%@) doesn't respond to @selector(setAttributesIdentity:attributes:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identity = args[0];
        TWCONAttributesData *arg_attributes = args[1];
        [api setAttributesIdentity:arg_identity attributes:arg_attributes completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface TWCONFlutterConversationClientApiCodecReader : FlutterStandardReader
@end
@implementation TWCONFlutterConversationClientApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [TWCONAttributesData fromMap:[self readValue]];
    
    case 129:     
      return [TWCONConversationData fromMap:[self readValue]];
    
    case 130:     
      return [TWCONConversationUpdatedData fromMap:[self readValue]];
    
    case 131:     
      return [TWCONErrorInfoData fromMap:[self readValue]];
    
    case 132:     
      return [TWCONMessageData fromMap:[self readValue]];
    
    case 133:     
      return [TWCONMessageMediaData fromMap:[self readValue]];
    
    case 134:     
      return [TWCONParticipantData fromMap:[self readValue]];
    
    case 135:     
      return [TWCONUserData fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface TWCONFlutterConversationClientApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONFlutterConversationClientApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[TWCONAttributesData class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationData class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONConversationUpdatedData class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONErrorInfoData class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageData class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONMessageMediaData class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONParticipantData class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[TWCONUserData class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface TWCONFlutterConversationClientApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONFlutterConversationClientApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONFlutterConversationClientApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONFlutterConversationClientApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONFlutterConversationClientApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONFlutterConversationClientApiCodecReaderWriter *readerWriter = [[TWCONFlutterConversationClientApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface TWCONFlutterConversationClientApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation TWCONFlutterConversationClientApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)errorErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.error"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationAddedConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationUpdatedEvent:(TWCONConversationUpdatedData *)arg_event completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_event] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationDeletedConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)clientSynchronizationSynchronizationStatus:(NSString *)arg_synchronizationStatus completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.clientSynchronization"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_synchronizationStatus] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)conversationSynchronizationChangeConversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.conversationSynchronizationChange"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)connectionStateChangeConnectionState:(NSString *)arg_connectionState completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.connectionStateChange"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_connectionState] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)tokenAboutToExpireWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.tokenAboutToExpire"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)tokenExpiredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.tokenExpired"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userSubscribedUserData:(TWCONUserData *)arg_userData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userSubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userUnsubscribedUserData:(TWCONUserData *)arg_userData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userUnsubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)userUpdatedUserData:(TWCONUserData *)arg_userData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.userUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_userData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)addedToConversationNotificationConversationSid:(NSString *)arg_conversationSid completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.addedToConversationNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)newMessageNotificationConversationSid:(NSString *)arg_conversationSid messageIndex:(NSNumber *)arg_messageIndex completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.newMessageNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageIndex] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)notificationSubscribedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.notificationSubscribed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)notificationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.notificationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)removedFromConversationNotificationConversationSid:(NSString *)arg_conversationSid completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.removedFromConversationNotification"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)registeredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.registered"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)registrationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.registrationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)deregisteredWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.deregistered"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)deregistrationFailedErrorInfoData:(TWCONErrorInfoData *)arg_errorInfoData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.deregistrationFailed"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_errorInfoData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageAddedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageUpdatedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)messageDeletedConversationSid:(NSString *)arg_conversationSid messageData:(TWCONMessageData *)arg_messageData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.messageDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_messageData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantAddedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantAdded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantUpdatedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData reason:(NSString *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantUpdated"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData, arg_reason] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)participantDeletedConversationSid:(NSString *)arg_conversationSid participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.participantDeleted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)typingStartedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.typingStarted"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)typingEndedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData participantData:(TWCONParticipantData *)arg_participantData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.typingEnded"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData, arg_participantData] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)synchronizationChangedConversationSid:(NSString *)arg_conversationSid conversationData:(TWCONConversationData *)arg_conversationData completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterConversationClientApi.synchronizationChanged"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterConversationClientApiGetCodec()];
  [channel sendMessage:@[arg_conversationSid, arg_conversationData] reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface TWCONFlutterLoggingApiCodecReader : FlutterStandardReader
@end
@implementation TWCONFlutterLoggingApiCodecReader
@end

@interface TWCONFlutterLoggingApiCodecWriter : FlutterStandardWriter
@end
@implementation TWCONFlutterLoggingApiCodecWriter
@end

@interface TWCONFlutterLoggingApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation TWCONFlutterLoggingApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[TWCONFlutterLoggingApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[TWCONFlutterLoggingApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *TWCONFlutterLoggingApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    TWCONFlutterLoggingApiCodecReaderWriter *readerWriter = [[TWCONFlutterLoggingApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface TWCONFlutterLoggingApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation TWCONFlutterLoggingApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)logFromHostMsg:(NSString *)arg_msg completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterLoggingApi.logFromHost"
      binaryMessenger:self.binaryMessenger
      codec:TWCONFlutterLoggingApiGetCodec()];
  [channel sendMessage:@[arg_msg] reply:^(id reply) {
    completion(nil);
  }];
}
@end
