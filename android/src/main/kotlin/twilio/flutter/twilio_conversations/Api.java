// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package twilio.flutter.twilio_conversations;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Api {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConversationClientData {
    private @Nullable String myIdentity;

    public @Nullable String getMyIdentity() {
      return myIdentity;
    }

    public void setMyIdentity(@Nullable String setterArg) {
      this.myIdentity = setterArg;
    }

    private @Nullable String connectionState;

    public @Nullable String getConnectionState() {
      return connectionState;
    }

    public void setConnectionState(@Nullable String setterArg) {
      this.connectionState = setterArg;
    }

    private @Nullable Boolean isReachabilityEnabled;

    public @Nullable Boolean getIsReachabilityEnabled() {
      return isReachabilityEnabled;
    }

    public void setIsReachabilityEnabled(@Nullable Boolean setterArg) {
      this.isReachabilityEnabled = setterArg;
    }

    public static final class Builder {

      private @Nullable String myIdentity;

      public @NonNull Builder setMyIdentity(@Nullable String setterArg) {
        this.myIdentity = setterArg;
        return this;
      }

      private @Nullable String connectionState;

      public @NonNull Builder setConnectionState(@Nullable String setterArg) {
        this.connectionState = setterArg;
        return this;
      }

      private @Nullable Boolean isReachabilityEnabled;

      public @NonNull Builder setIsReachabilityEnabled(@Nullable Boolean setterArg) {
        this.isReachabilityEnabled = setterArg;
        return this;
      }

      public @NonNull ConversationClientData build() {
        ConversationClientData pigeonReturn = new ConversationClientData();
        pigeonReturn.setMyIdentity(myIdentity);
        pigeonReturn.setConnectionState(connectionState);
        pigeonReturn.setIsReachabilityEnabled(isReachabilityEnabled);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(myIdentity);
      toListResult.add(connectionState);
      toListResult.add(isReachabilityEnabled);
      return toListResult;
    }

    static @NonNull ConversationClientData fromList(@NonNull ArrayList<Object> list) {
      ConversationClientData pigeonResult = new ConversationClientData();
      Object myIdentity = list.get(0);
      pigeonResult.setMyIdentity((String) myIdentity);
      Object connectionState = list.get(1);
      pigeonResult.setConnectionState((String) connectionState);
      Object isReachabilityEnabled = list.get(2);
      pigeonResult.setIsReachabilityEnabled((Boolean) isReachabilityEnabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PropertiesData {
    private @Nullable String region;

    public @Nullable String getRegion() {
      return region;
    }

    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    public static final class Builder {

      private @Nullable String region;

      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }

      public @NonNull PropertiesData build() {
        PropertiesData pigeonReturn = new PropertiesData();
        pigeonReturn.setRegion(region);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(region);
      return toListResult;
    }

    static @NonNull PropertiesData fromList(@NonNull ArrayList<Object> list) {
      PropertiesData pigeonResult = new PropertiesData();
      Object region = list.get(0);
      pigeonResult.setRegion((String) region);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConversationData {
    private @Nullable String sid;

    public @Nullable String getSid() {
      return sid;
    }

    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable AttributesData attributes;

    public @Nullable AttributesData getAttributes() {
      return attributes;
    }

    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String uniqueName;

    public @Nullable String getUniqueName() {
      return uniqueName;
    }

    public void setUniqueName(@Nullable String setterArg) {
      this.uniqueName = setterArg;
    }

    private @Nullable String friendlyName;

    public @Nullable String getFriendlyName() {
      return friendlyName;
    }

    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable String status;

    public @Nullable String getStatus() {
      return status;
    }

    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable String synchronizationStatus;

    public @Nullable String getSynchronizationStatus() {
      return synchronizationStatus;
    }

    public void setSynchronizationStatus(@Nullable String setterArg) {
      this.synchronizationStatus = setterArg;
    }

    private @Nullable String dateCreated;

    public @Nullable String getDateCreated() {
      return dateCreated;
    }

    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String createdBy;

    public @Nullable String getCreatedBy() {
      return createdBy;
    }

    public void setCreatedBy(@Nullable String setterArg) {
      this.createdBy = setterArg;
    }

    private @Nullable String dateUpdated;

    public @Nullable String getDateUpdated() {
      return dateUpdated;
    }

    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String lastMessageDate;

    public @Nullable String getLastMessageDate() {
      return lastMessageDate;
    }

    public void setLastMessageDate(@Nullable String setterArg) {
      this.lastMessageDate = setterArg;
    }

    private @Nullable Long lastReadMessageIndex;

    public @Nullable Long getLastReadMessageIndex() {
      return lastReadMessageIndex;
    }

    public void setLastReadMessageIndex(@Nullable Long setterArg) {
      this.lastReadMessageIndex = setterArg;
    }

    private @Nullable Long lastMessageIndex;

    public @Nullable Long getLastMessageIndex() {
      return lastMessageIndex;
    }

    public void setLastMessageIndex(@Nullable Long setterArg) {
      this.lastMessageIndex = setterArg;
    }

    public static final class Builder {

      private @Nullable String sid;

      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }

      private @Nullable AttributesData attributes;

      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }

      private @Nullable String uniqueName;

      public @NonNull Builder setUniqueName(@Nullable String setterArg) {
        this.uniqueName = setterArg;
        return this;
      }

      private @Nullable String friendlyName;

      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }

      private @Nullable String status;

      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }

      private @Nullable String synchronizationStatus;

      public @NonNull Builder setSynchronizationStatus(@Nullable String setterArg) {
        this.synchronizationStatus = setterArg;
        return this;
      }

      private @Nullable String dateCreated;

      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }

      private @Nullable String createdBy;

      public @NonNull Builder setCreatedBy(@Nullable String setterArg) {
        this.createdBy = setterArg;
        return this;
      }

      private @Nullable String dateUpdated;

      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }

      private @Nullable String lastMessageDate;

      public @NonNull Builder setLastMessageDate(@Nullable String setterArg) {
        this.lastMessageDate = setterArg;
        return this;
      }

      private @Nullable Long lastReadMessageIndex;

      public @NonNull Builder setLastReadMessageIndex(@Nullable Long setterArg) {
        this.lastReadMessageIndex = setterArg;
        return this;
      }

      private @Nullable Long lastMessageIndex;

      public @NonNull Builder setLastMessageIndex(@Nullable Long setterArg) {
        this.lastMessageIndex = setterArg;
        return this;
      }

      public @NonNull ConversationData build() {
        ConversationData pigeonReturn = new ConversationData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setUniqueName(uniqueName);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setStatus(status);
        pigeonReturn.setSynchronizationStatus(synchronizationStatus);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setCreatedBy(createdBy);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setLastMessageDate(lastMessageDate);
        pigeonReturn.setLastReadMessageIndex(lastReadMessageIndex);
        pigeonReturn.setLastMessageIndex(lastMessageIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(sid);
      toListResult.add((attributes == null) ? null : attributes.toList());
      toListResult.add(uniqueName);
      toListResult.add(friendlyName);
      toListResult.add(status);
      toListResult.add(synchronizationStatus);
      toListResult.add(dateCreated);
      toListResult.add(createdBy);
      toListResult.add(dateUpdated);
      toListResult.add(lastMessageDate);
      toListResult.add(lastReadMessageIndex);
      toListResult.add(lastMessageIndex);
      return toListResult;
    }

    static @NonNull ConversationData fromList(@NonNull ArrayList<Object> list) {
      ConversationData pigeonResult = new ConversationData();
      Object sid = list.get(0);
      pigeonResult.setSid((String) sid);
      Object attributes = list.get(1);
      pigeonResult.setAttributes((attributes == null) ? null : AttributesData.fromList((ArrayList<Object>) attributes));
      Object uniqueName = list.get(2);
      pigeonResult.setUniqueName((String) uniqueName);
      Object friendlyName = list.get(3);
      pigeonResult.setFriendlyName((String) friendlyName);
      Object status = list.get(4);
      pigeonResult.setStatus((String) status);
      Object synchronizationStatus = list.get(5);
      pigeonResult.setSynchronizationStatus((String) synchronizationStatus);
      Object dateCreated = list.get(6);
      pigeonResult.setDateCreated((String) dateCreated);
      Object createdBy = list.get(7);
      pigeonResult.setCreatedBy((String) createdBy);
      Object dateUpdated = list.get(8);
      pigeonResult.setDateUpdated((String) dateUpdated);
      Object lastMessageDate = list.get(9);
      pigeonResult.setLastMessageDate((String) lastMessageDate);
      Object lastReadMessageIndex = list.get(10);
      pigeonResult.setLastReadMessageIndex((lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer) lastReadMessageIndex : (Long) lastReadMessageIndex));
      Object lastMessageIndex = list.get(11);
      pigeonResult.setLastMessageIndex((lastMessageIndex == null) ? null : ((lastMessageIndex instanceof Integer) ? (Integer) lastMessageIndex : (Long) lastMessageIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AttributesData {
    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull AttributesData build() {
        AttributesData pigeonReturn = new AttributesData();
        pigeonReturn.setType(type);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull AttributesData fromList(@NonNull ArrayList<Object> list) {
      AttributesData pigeonResult = new AttributesData();
      Object type = list.get(0);
      pigeonResult.setType((String) type);
      Object data = list.get(1);
      pigeonResult.setData((String) data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TokenData {
    private @Nullable String token;

    public @Nullable String getToken() {
      return token;
    }

    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    public static final class Builder {

      private @Nullable String token;

      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }

      public @NonNull TokenData build() {
        TokenData pigeonReturn = new TokenData();
        pigeonReturn.setToken(token);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(token);
      return toListResult;
    }

    static @NonNull TokenData fromList(@NonNull ArrayList<Object> list) {
      TokenData pigeonResult = new TokenData();
      Object token = list.get(0);
      pigeonResult.setToken((String) token);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MessageMediaData {
    private @Nullable String sid;

    public @Nullable String getSid() {
      return sid;
    }

    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable String fileName;

    public @Nullable String getFileName() {
      return fileName;
    }

    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long size;

    public @Nullable Long getSize() {
      return size;
    }

    public void setSize(@Nullable Long setterArg) {
      this.size = setterArg;
    }

    private @Nullable String conversationSid;

    public @Nullable String getConversationSid() {
      return conversationSid;
    }

    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String messageSid;

    public @Nullable String getMessageSid() {
      return messageSid;
    }

    public void setMessageSid(@Nullable String setterArg) {
      this.messageSid = setterArg;
    }

    private @Nullable Long messageIndex;

    public @Nullable Long getMessageIndex() {
      return messageIndex;
    }

    public void setMessageIndex(@Nullable Long setterArg) {
      this.messageIndex = setterArg;
    }

    public static final class Builder {

      private @Nullable String sid;

      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }

      private @Nullable String fileName;

      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Long size;

      public @NonNull Builder setSize(@Nullable Long setterArg) {
        this.size = setterArg;
        return this;
      }

      private @Nullable String conversationSid;

      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }

      private @Nullable String messageSid;

      public @NonNull Builder setMessageSid(@Nullable String setterArg) {
        this.messageSid = setterArg;
        return this;
      }

      private @Nullable Long messageIndex;

      public @NonNull Builder setMessageIndex(@Nullable Long setterArg) {
        this.messageIndex = setterArg;
        return this;
      }

      public @NonNull MessageMediaData build() {
        MessageMediaData pigeonReturn = new MessageMediaData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setType(type);
        pigeonReturn.setSize(size);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setMessageSid(messageSid);
        pigeonReturn.setMessageIndex(messageIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(sid);
      toListResult.add(fileName);
      toListResult.add(type);
      toListResult.add(size);
      toListResult.add(conversationSid);
      toListResult.add(messageSid);
      toListResult.add(messageIndex);
      return toListResult;
    }

    static @NonNull MessageMediaData fromList(@NonNull ArrayList<Object> list) {
      MessageMediaData pigeonResult = new MessageMediaData();
      Object sid = list.get(0);
      pigeonResult.setSid((String) sid);
      Object fileName = list.get(1);
      pigeonResult.setFileName((String) fileName);
      Object type = list.get(2);
      pigeonResult.setType((String) type);
      Object size = list.get(3);
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer) size : (Long) size));
      Object conversationSid = list.get(4);
      pigeonResult.setConversationSid((String) conversationSid);
      Object messageSid = list.get(5);
      pigeonResult.setMessageSid((String) messageSid);
      Object messageIndex = list.get(6);
      pigeonResult.setMessageIndex((messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer) messageIndex : (Long) messageIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MessageData {
    private @Nullable String sid;

    public @Nullable String getSid() {
      return sid;
    }

    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable Long messageIndex;

    public @Nullable Long getMessageIndex() {
      return messageIndex;
    }

    public void setMessageIndex(@Nullable Long setterArg) {
      this.messageIndex = setterArg;
    }

    private @Nullable String author;

    public @Nullable String getAuthor() {
      return author;
    }

    public void setAuthor(@Nullable String setterArg) {
      this.author = setterArg;
    }

    private @Nullable String subject;

    public @Nullable String getSubject() {
      return subject;
    }

    public void setSubject(@Nullable String setterArg) {
      this.subject = setterArg;
    }

    private @Nullable String messageBody;

    public @Nullable String getMessageBody() {
      return messageBody;
    }

    public void setMessageBody(@Nullable String setterArg) {
      this.messageBody = setterArg;
    }

    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean hasMedia;

    public @Nullable Boolean getHasMedia() {
      return hasMedia;
    }

    public void setHasMedia(@Nullable Boolean setterArg) {
      this.hasMedia = setterArg;
    }

    private @Nullable MessageMediaData media;

    public @Nullable MessageMediaData getMedia() {
      return media;
    }

    public void setMedia(@Nullable MessageMediaData setterArg) {
      this.media = setterArg;
    }

    private @Nullable String conversationSid;

    public @Nullable String getConversationSid() {
      return conversationSid;
    }

    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String participantSid;

    public @Nullable String getParticipantSid() {
      return participantSid;
    }

    public void setParticipantSid(@Nullable String setterArg) {
      this.participantSid = setterArg;
    }

    private @Nullable String dateCreated;

    public @Nullable String getDateCreated() {
      return dateCreated;
    }

    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String dateUpdated;

    public @Nullable String getDateUpdated() {
      return dateUpdated;
    }

    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String lastUpdatedBy;

    public @Nullable String getLastUpdatedBy() {
      return lastUpdatedBy;
    }

    public void setLastUpdatedBy(@Nullable String setterArg) {
      this.lastUpdatedBy = setterArg;
    }

    private @Nullable AttributesData attributes;

    public @Nullable AttributesData getAttributes() {
      return attributes;
    }

    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    public static final class Builder {

      private @Nullable String sid;

      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }

      private @Nullable Long messageIndex;

      public @NonNull Builder setMessageIndex(@Nullable Long setterArg) {
        this.messageIndex = setterArg;
        return this;
      }

      private @Nullable String author;

      public @NonNull Builder setAuthor(@Nullable String setterArg) {
        this.author = setterArg;
        return this;
      }

      private @Nullable String subject;

      public @NonNull Builder setSubject(@Nullable String setterArg) {
        this.subject = setterArg;
        return this;
      }

      private @Nullable String messageBody;

      public @NonNull Builder setMessageBody(@Nullable String setterArg) {
        this.messageBody = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean hasMedia;

      public @NonNull Builder setHasMedia(@Nullable Boolean setterArg) {
        this.hasMedia = setterArg;
        return this;
      }

      private @Nullable MessageMediaData media;

      public @NonNull Builder setMedia(@Nullable MessageMediaData setterArg) {
        this.media = setterArg;
        return this;
      }

      private @Nullable String conversationSid;

      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }

      private @Nullable String participantSid;

      public @NonNull Builder setParticipantSid(@Nullable String setterArg) {
        this.participantSid = setterArg;
        return this;
      }

      private @Nullable String dateCreated;

      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }

      private @Nullable String dateUpdated;

      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }

      private @Nullable String lastUpdatedBy;

      public @NonNull Builder setLastUpdatedBy(@Nullable String setterArg) {
        this.lastUpdatedBy = setterArg;
        return this;
      }

      private @Nullable AttributesData attributes;

      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }

      public @NonNull MessageData build() {
        MessageData pigeonReturn = new MessageData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setMessageIndex(messageIndex);
        pigeonReturn.setAuthor(author);
        pigeonReturn.setSubject(subject);
        pigeonReturn.setMessageBody(messageBody);
        pigeonReturn.setType(type);
        pigeonReturn.setHasMedia(hasMedia);
        pigeonReturn.setMedia(media);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setParticipantSid(participantSid);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setLastUpdatedBy(lastUpdatedBy);
        pigeonReturn.setAttributes(attributes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(14);
      toListResult.add(sid);
      toListResult.add(messageIndex);
      toListResult.add(author);
      toListResult.add(subject);
      toListResult.add(messageBody);
      toListResult.add(type);
      toListResult.add(hasMedia);
      toListResult.add((media == null) ? null : media.toList());
      toListResult.add(conversationSid);
      toListResult.add(participantSid);
      toListResult.add(dateCreated);
      toListResult.add(dateUpdated);
      toListResult.add(lastUpdatedBy);
      toListResult.add((attributes == null) ? null : attributes.toList());
      return toListResult;
    }

    static @NonNull MessageData fromList(@NonNull ArrayList<Object> list) {
      MessageData pigeonResult = new MessageData();
      Object sid = list.get(0);
      pigeonResult.setSid((String) sid);
      Object messageIndex = list.get(1);
      pigeonResult.setMessageIndex((messageIndex == null) ? null : ((messageIndex instanceof Integer) ? (Integer) messageIndex : (Long) messageIndex));
      Object author = list.get(2);
      pigeonResult.setAuthor((String) author);
      Object subject = list.get(3);
      pigeonResult.setSubject((String) subject);
      Object messageBody = list.get(4);
      pigeonResult.setMessageBody((String) messageBody);
      Object type = list.get(5);
      pigeonResult.setType((String) type);
      Object hasMedia = list.get(6);
      pigeonResult.setHasMedia((Boolean) hasMedia);
      Object media = list.get(7);
      pigeonResult.setMedia((media == null) ? null : MessageMediaData.fromList((ArrayList<Object>) media));
      Object conversationSid = list.get(8);
      pigeonResult.setConversationSid((String) conversationSid);
      Object participantSid = list.get(9);
      pigeonResult.setParticipantSid((String) participantSid);
      Object dateCreated = list.get(10);
      pigeonResult.setDateCreated((String) dateCreated);
      Object dateUpdated = list.get(11);
      pigeonResult.setDateUpdated((String) dateUpdated);
      Object lastUpdatedBy = list.get(12);
      pigeonResult.setLastUpdatedBy((String) lastUpdatedBy);
      Object attributes = list.get(13);
      pigeonResult.setAttributes((attributes == null) ? null : AttributesData.fromList((ArrayList<Object>) attributes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MessageOptionsData {
    private @Nullable String body;

    public @Nullable String getBody() {
      return body;
    }

    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    private @Nullable AttributesData attributes;

    public @Nullable AttributesData getAttributes() {
      return attributes;
    }

    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String mimeType;

    public @Nullable String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable String filename;

    public @Nullable String getFilename() {
      return filename;
    }

    public void setFilename(@Nullable String setterArg) {
      this.filename = setterArg;
    }

    private @Nullable String inputPath;

    public @Nullable String getInputPath() {
      return inputPath;
    }

    public void setInputPath(@Nullable String setterArg) {
      this.inputPath = setterArg;
    }

    private @Nullable Long mediaProgressListenerId;

    public @Nullable Long getMediaProgressListenerId() {
      return mediaProgressListenerId;
    }

    public void setMediaProgressListenerId(@Nullable Long setterArg) {
      this.mediaProgressListenerId = setterArg;
    }

    public static final class Builder {

      private @Nullable String body;

      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable AttributesData attributes;

      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable String filename;

      public @NonNull Builder setFilename(@Nullable String setterArg) {
        this.filename = setterArg;
        return this;
      }

      private @Nullable String inputPath;

      public @NonNull Builder setInputPath(@Nullable String setterArg) {
        this.inputPath = setterArg;
        return this;
      }

      private @Nullable Long mediaProgressListenerId;

      public @NonNull Builder setMediaProgressListenerId(@Nullable Long setterArg) {
        this.mediaProgressListenerId = setterArg;
        return this;
      }

      public @NonNull MessageOptionsData build() {
        MessageOptionsData pigeonReturn = new MessageOptionsData();
        pigeonReturn.setBody(body);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setFilename(filename);
        pigeonReturn.setInputPath(inputPath);
        pigeonReturn.setMediaProgressListenerId(mediaProgressListenerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(body);
      toListResult.add((attributes == null) ? null : attributes.toList());
      toListResult.add(mimeType);
      toListResult.add(filename);
      toListResult.add(inputPath);
      toListResult.add(mediaProgressListenerId);
      return toListResult;
    }

    static @NonNull MessageOptionsData fromList(@NonNull ArrayList<Object> list) {
      MessageOptionsData pigeonResult = new MessageOptionsData();
      Object body = list.get(0);
      pigeonResult.setBody((String) body);
      Object attributes = list.get(1);
      pigeonResult.setAttributes((attributes == null) ? null : AttributesData.fromList((ArrayList<Object>) attributes));
      Object mimeType = list.get(2);
      pigeonResult.setMimeType((String) mimeType);
      Object filename = list.get(3);
      pigeonResult.setFilename((String) filename);
      Object inputPath = list.get(4);
      pigeonResult.setInputPath((String) inputPath);
      Object mediaProgressListenerId = list.get(5);
      pigeonResult.setMediaProgressListenerId((mediaProgressListenerId == null) ? null : ((mediaProgressListenerId instanceof Integer) ? (Integer) mediaProgressListenerId : (Long) mediaProgressListenerId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ParticipantData {
    private @Nullable String sid;

    public @Nullable String getSid() {
      return sid;
    }

    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    private @Nullable String conversationSid;

    public @Nullable String getConversationSid() {
      return conversationSid;
    }

    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable AttributesData attributes;

    public @Nullable AttributesData getAttributes() {
      return attributes;
    }

    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String dateCreated;

    public @Nullable String getDateCreated() {
      return dateCreated;
    }

    public void setDateCreated(@Nullable String setterArg) {
      this.dateCreated = setterArg;
    }

    private @Nullable String dateUpdated;

    public @Nullable String getDateUpdated() {
      return dateUpdated;
    }

    public void setDateUpdated(@Nullable String setterArg) {
      this.dateUpdated = setterArg;
    }

    private @Nullable String identity;

    public @Nullable String getIdentity() {
      return identity;
    }

    public void setIdentity(@Nullable String setterArg) {
      this.identity = setterArg;
    }

    private @Nullable Long lastReadMessageIndex;

    public @Nullable Long getLastReadMessageIndex() {
      return lastReadMessageIndex;
    }

    public void setLastReadMessageIndex(@Nullable Long setterArg) {
      this.lastReadMessageIndex = setterArg;
    }

    private @Nullable String lastReadTimestamp;

    public @Nullable String getLastReadTimestamp() {
      return lastReadTimestamp;
    }

    public void setLastReadTimestamp(@Nullable String setterArg) {
      this.lastReadTimestamp = setterArg;
    }

    public static final class Builder {

      private @Nullable String sid;

      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }

      private @Nullable String conversationSid;

      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable AttributesData attributes;

      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }

      private @Nullable String dateCreated;

      public @NonNull Builder setDateCreated(@Nullable String setterArg) {
        this.dateCreated = setterArg;
        return this;
      }

      private @Nullable String dateUpdated;

      public @NonNull Builder setDateUpdated(@Nullable String setterArg) {
        this.dateUpdated = setterArg;
        return this;
      }

      private @Nullable String identity;

      public @NonNull Builder setIdentity(@Nullable String setterArg) {
        this.identity = setterArg;
        return this;
      }

      private @Nullable Long lastReadMessageIndex;

      public @NonNull Builder setLastReadMessageIndex(@Nullable Long setterArg) {
        this.lastReadMessageIndex = setterArg;
        return this;
      }

      private @Nullable String lastReadTimestamp;

      public @NonNull Builder setLastReadTimestamp(@Nullable String setterArg) {
        this.lastReadTimestamp = setterArg;
        return this;
      }

      public @NonNull ParticipantData build() {
        ParticipantData pigeonReturn = new ParticipantData();
        pigeonReturn.setSid(sid);
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setType(type);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setDateCreated(dateCreated);
        pigeonReturn.setDateUpdated(dateUpdated);
        pigeonReturn.setIdentity(identity);
        pigeonReturn.setLastReadMessageIndex(lastReadMessageIndex);
        pigeonReturn.setLastReadTimestamp(lastReadTimestamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(sid);
      toListResult.add(conversationSid);
      toListResult.add(type);
      toListResult.add((attributes == null) ? null : attributes.toList());
      toListResult.add(dateCreated);
      toListResult.add(dateUpdated);
      toListResult.add(identity);
      toListResult.add(lastReadMessageIndex);
      toListResult.add(lastReadTimestamp);
      return toListResult;
    }

    static @NonNull ParticipantData fromList(@NonNull ArrayList<Object> list) {
      ParticipantData pigeonResult = new ParticipantData();
      Object sid = list.get(0);
      pigeonResult.setSid((String) sid);
      Object conversationSid = list.get(1);
      pigeonResult.setConversationSid((String) conversationSid);
      Object type = list.get(2);
      pigeonResult.setType((String) type);
      Object attributes = list.get(3);
      pigeonResult.setAttributes((attributes == null) ? null : AttributesData.fromList((ArrayList<Object>) attributes));
      Object dateCreated = list.get(4);
      pigeonResult.setDateCreated((String) dateCreated);
      Object dateUpdated = list.get(5);
      pigeonResult.setDateUpdated((String) dateUpdated);
      Object identity = list.get(6);
      pigeonResult.setIdentity((String) identity);
      Object lastReadMessageIndex = list.get(7);
      pigeonResult.setLastReadMessageIndex((lastReadMessageIndex == null) ? null : ((lastReadMessageIndex instanceof Integer) ? (Integer) lastReadMessageIndex : (Long) lastReadMessageIndex));
      Object lastReadTimestamp = list.get(8);
      pigeonResult.setLastReadTimestamp((String) lastReadTimestamp);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeliveryReceiptData {
    private @Nullable Long total;

    public @Nullable Long getTotal() {
      return total;
    }

    public void setTotal(@Nullable Long setterArg) {
      this.total = setterArg;
    }

    private @Nullable String read;

    public @Nullable String getRead() {
      return read;
    }

    public void setRead(@Nullable String setterArg) {
      this.read = setterArg;
    }

    private @Nullable String undelivered;

    public @Nullable String getUndelivered() {
      return undelivered;
    }

    public void setUndelivered(@Nullable String setterArg) {
      this.undelivered = setterArg;
    }

    private @Nullable String delivered;

    public @Nullable String getDelivered() {
      return delivered;
    }

    public void setDelivered(@Nullable String setterArg) {
      this.delivered = setterArg;
    }

    private @Nullable String failed;

    public @Nullable String getFailed() {
      return failed;
    }

    public void setFailed(@Nullable String setterArg) {
      this.failed = setterArg;
    }

    private @Nullable String sent;

    public @Nullable String getSent() {
      return sent;
    }

    public void setSent(@Nullable String setterArg) {
      this.sent = setterArg;
    }

    public static final class Builder {

      private @Nullable Long total;

      public @NonNull Builder setTotal(@Nullable Long setterArg) {
        this.total = setterArg;
        return this;
      }

      private @Nullable String read;

      public @NonNull Builder setRead(@Nullable String setterArg) {
        this.read = setterArg;
        return this;
      }

      private @Nullable String undelivered;

      public @NonNull Builder setUndelivered(@Nullable String setterArg) {
        this.undelivered = setterArg;
        return this;
      }

      private @Nullable String delivered;

      public @NonNull Builder setDelivered(@Nullable String setterArg) {
        this.delivered = setterArg;
        return this;
      }

      private @Nullable String failed;

      public @NonNull Builder setFailed(@Nullable String setterArg) {
        this.failed = setterArg;
        return this;
      }

      private @Nullable String sent;

      public @NonNull Builder setSent(@Nullable String setterArg) {
        this.sent = setterArg;
        return this;
      }

      public @NonNull DeliveryReceiptData build() {
        DeliveryReceiptData pigeonReturn = new DeliveryReceiptData();
        pigeonReturn.setTotal(total);
        pigeonReturn.setRead(read);
        pigeonReturn.setUndelivered(undelivered);
        pigeonReturn.setDelivered(delivered);
        pigeonReturn.setFailed(failed);
        pigeonReturn.setSent(sent);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(total);
      toListResult.add(read);
      toListResult.add(undelivered);
      toListResult.add(delivered);
      toListResult.add(failed);
      toListResult.add(sent);
      return toListResult;
    }

    static @NonNull DeliveryReceiptData fromList(@NonNull ArrayList<Object> list) {
      DeliveryReceiptData pigeonResult = new DeliveryReceiptData();
      Object total = list.get(0);
      pigeonResult.setTotal((total == null) ? null : ((total instanceof Integer) ? (Integer) total : (Long) total));
      Object read = list.get(1);
      pigeonResult.setRead((String) read);
      Object undelivered = list.get(2);
      pigeonResult.setUndelivered((String) undelivered);
      Object delivered = list.get(3);
      pigeonResult.setDelivered((String) delivered);
      Object failed = list.get(4);
      pigeonResult.setFailed((String) failed);
      Object sent = list.get(5);
      pigeonResult.setSent((String) sent);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DetailedDeliveryReceiptData {
    private @Nullable String conversationSid;

    public @Nullable String getConversationSid() {
      return conversationSid;
    }

    public void setConversationSid(@Nullable String setterArg) {
      this.conversationSid = setterArg;
    }

    private @Nullable String channelMessageSid;

    public @Nullable String getChannelMessageSid() {
      return channelMessageSid;
    }

    public void setChannelMessageSid(@Nullable String setterArg) {
      this.channelMessageSid = setterArg;
    }

    private @Nullable String dateCreatedAsDate;

    public @Nullable String getDateCreatedAsDate() {
      return dateCreatedAsDate;
    }

    public void setDateCreatedAsDate(@Nullable String setterArg) {
      this.dateCreatedAsDate = setterArg;
    }

    private @Nullable String dateUpdatedAsDate;

    public @Nullable String getDateUpdatedAsDate() {
      return dateUpdatedAsDate;
    }

    public void setDateUpdatedAsDate(@Nullable String setterArg) {
      this.dateUpdatedAsDate = setterArg;
    }

    private @Nullable Long errorCode;

    public @Nullable Long getErrorCode() {
      return errorCode;
    }

    public void setErrorCode(@Nullable Long setterArg) {
      this.errorCode = setterArg;
    }

    private @Nullable String messageSid;

    public @Nullable String getMessageSid() {
      return messageSid;
    }

    public void setMessageSid(@Nullable String setterArg) {
      this.messageSid = setterArg;
    }

    private @Nullable String participantSid;

    public @Nullable String getParticipantSid() {
      return participantSid;
    }

    public void setParticipantSid(@Nullable String setterArg) {
      this.participantSid = setterArg;
    }

    private @Nullable String sid;

    public @Nullable String getSid() {
      return sid;
    }

    public void setSid(@Nullable String setterArg) {
      this.sid = setterArg;
    }

    public static final class Builder {

      private @Nullable String conversationSid;

      public @NonNull Builder setConversationSid(@Nullable String setterArg) {
        this.conversationSid = setterArg;
        return this;
      }

      private @Nullable String channelMessageSid;

      public @NonNull Builder setChannelMessageSid(@Nullable String setterArg) {
        this.channelMessageSid = setterArg;
        return this;
      }

      private @Nullable String dateCreatedAsDate;

      public @NonNull Builder setDateCreatedAsDate(@Nullable String setterArg) {
        this.dateCreatedAsDate = setterArg;
        return this;
      }

      private @Nullable String dateUpdatedAsDate;

      public @NonNull Builder setDateUpdatedAsDate(@Nullable String setterArg) {
        this.dateUpdatedAsDate = setterArg;
        return this;
      }

      private @Nullable Long errorCode;

      public @NonNull Builder setErrorCode(@Nullable Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }

      private @Nullable String messageSid;

      public @NonNull Builder setMessageSid(@Nullable String setterArg) {
        this.messageSid = setterArg;
        return this;
      }

      private @Nullable String participantSid;

      public @NonNull Builder setParticipantSid(@Nullable String setterArg) {
        this.participantSid = setterArg;
        return this;
      }

      private @Nullable String sid;

      public @NonNull Builder setSid(@Nullable String setterArg) {
        this.sid = setterArg;
        return this;
      }

      public @NonNull DetailedDeliveryReceiptData build() {
        DetailedDeliveryReceiptData pigeonReturn = new DetailedDeliveryReceiptData();
        pigeonReturn.setConversationSid(conversationSid);
        pigeonReturn.setChannelMessageSid(channelMessageSid);
        pigeonReturn.setDateCreatedAsDate(dateCreatedAsDate);
        pigeonReturn.setDateUpdatedAsDate(dateUpdatedAsDate);
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setMessageSid(messageSid);
        pigeonReturn.setParticipantSid(participantSid);
        pigeonReturn.setSid(sid);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(conversationSid);
      toListResult.add(channelMessageSid);
      toListResult.add(dateCreatedAsDate);
      toListResult.add(dateUpdatedAsDate);
      toListResult.add(errorCode);
      toListResult.add(messageSid);
      toListResult.add(participantSid);
      toListResult.add(sid);
      return toListResult;
    }

    static @NonNull DetailedDeliveryReceiptData fromList(@NonNull ArrayList<Object> list) {
      DetailedDeliveryReceiptData pigeonResult = new DetailedDeliveryReceiptData();
      Object conversationSid = list.get(0);
      pigeonResult.setConversationSid((String) conversationSid);
      Object channelMessageSid = list.get(1);
      pigeonResult.setChannelMessageSid((String) channelMessageSid);
      Object dateCreatedAsDate = list.get(2);
      pigeonResult.setDateCreatedAsDate((String) dateCreatedAsDate);
      Object dateUpdatedAsDate = list.get(3);
      pigeonResult.setDateUpdatedAsDate((String) dateUpdatedAsDate);
      Object errorCode = list.get(4);
      pigeonResult.setErrorCode((errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer) errorCode : (Long) errorCode));
      Object messageSid = list.get(5);
      pigeonResult.setMessageSid((String) messageSid);
      Object participantSid = list.get(6);
      pigeonResult.setParticipantSid((String) participantSid);
      Object sid = list.get(7);
      pigeonResult.setSid((String) sid);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UserData {
    private @Nullable String identity;

    public @Nullable String getIdentity() {
      return identity;
    }

    public void setIdentity(@Nullable String setterArg) {
      this.identity = setterArg;
    }

    private @Nullable AttributesData attributes;

    public @Nullable AttributesData getAttributes() {
      return attributes;
    }

    public void setAttributes(@Nullable AttributesData setterArg) {
      this.attributes = setterArg;
    }

    private @Nullable String friendlyName;

    public @Nullable String getFriendlyName() {
      return friendlyName;
    }

    public void setFriendlyName(@Nullable String setterArg) {
      this.friendlyName = setterArg;
    }

    private @Nullable Boolean isNotifiable;

    public @Nullable Boolean getIsNotifiable() {
      return isNotifiable;
    }

    public void setIsNotifiable(@Nullable Boolean setterArg) {
      this.isNotifiable = setterArg;
    }

    private @Nullable Boolean isOnline;

    public @Nullable Boolean getIsOnline() {
      return isOnline;
    }

    public void setIsOnline(@Nullable Boolean setterArg) {
      this.isOnline = setterArg;
    }

    private @Nullable Boolean isSubscribed;

    public @Nullable Boolean getIsSubscribed() {
      return isSubscribed;
    }

    public void setIsSubscribed(@Nullable Boolean setterArg) {
      this.isSubscribed = setterArg;
    }

    public static final class Builder {

      private @Nullable String identity;

      public @NonNull Builder setIdentity(@Nullable String setterArg) {
        this.identity = setterArg;
        return this;
      }

      private @Nullable AttributesData attributes;

      public @NonNull Builder setAttributes(@Nullable AttributesData setterArg) {
        this.attributes = setterArg;
        return this;
      }

      private @Nullable String friendlyName;

      public @NonNull Builder setFriendlyName(@Nullable String setterArg) {
        this.friendlyName = setterArg;
        return this;
      }

      private @Nullable Boolean isNotifiable;

      public @NonNull Builder setIsNotifiable(@Nullable Boolean setterArg) {
        this.isNotifiable = setterArg;
        return this;
      }

      private @Nullable Boolean isOnline;

      public @NonNull Builder setIsOnline(@Nullable Boolean setterArg) {
        this.isOnline = setterArg;
        return this;
      }

      private @Nullable Boolean isSubscribed;

      public @NonNull Builder setIsSubscribed(@Nullable Boolean setterArg) {
        this.isSubscribed = setterArg;
        return this;
      }

      public @NonNull UserData build() {
        UserData pigeonReturn = new UserData();
        pigeonReturn.setIdentity(identity);
        pigeonReturn.setAttributes(attributes);
        pigeonReturn.setFriendlyName(friendlyName);
        pigeonReturn.setIsNotifiable(isNotifiable);
        pigeonReturn.setIsOnline(isOnline);
        pigeonReturn.setIsSubscribed(isSubscribed);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(identity);
      toListResult.add((attributes == null) ? null : attributes.toList());
      toListResult.add(friendlyName);
      toListResult.add(isNotifiable);
      toListResult.add(isOnline);
      toListResult.add(isSubscribed);
      return toListResult;
    }

    static @NonNull UserData fromList(@NonNull ArrayList<Object> list) {
      UserData pigeonResult = new UserData();
      Object identity = list.get(0);
      pigeonResult.setIdentity((String) identity);
      Object attributes = list.get(1);
      pigeonResult.setAttributes((attributes == null) ? null : AttributesData.fromList((ArrayList<Object>) attributes));
      Object friendlyName = list.get(2);
      pigeonResult.setFriendlyName((String) friendlyName);
      Object isNotifiable = list.get(3);
      pigeonResult.setIsNotifiable((Boolean) isNotifiable);
      Object isOnline = list.get(4);
      pigeonResult.setIsOnline((Boolean) isOnline);
      Object isSubscribed = list.get(5);
      pigeonResult.setIsSubscribed((Boolean) isSubscribed);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MessageCount {
    private @Nullable Long count;

    public @Nullable Long getCount() {
      return count;
    }

    public void setCount(@Nullable Long setterArg) {
      this.count = setterArg;
    }

    public static final class Builder {

      private @Nullable Long count;

      public @NonNull Builder setCount(@Nullable Long setterArg) {
        this.count = setterArg;
        return this;
      }

      public @NonNull MessageCount build() {
        MessageCount pigeonReturn = new MessageCount();
        pigeonReturn.setCount(count);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(count);
      return toListResult;
    }

    static @NonNull MessageCount fromList(@NonNull ArrayList<Object> list) {
      MessageCount pigeonResult = new MessageCount();
      Object count = list.get(0);
      pigeonResult.setCount((count == null) ? null : ((count instanceof Integer) ? (Integer) count : (Long) count));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConversationUpdatedData {
    private @Nullable ConversationData conversation;

    public @Nullable ConversationData getConversation() {
      return conversation;
    }

    public void setConversation(@Nullable ConversationData setterArg) {
      this.conversation = setterArg;
    }

    private @Nullable String reason;

    public @Nullable String getReason() {
      return reason;
    }

    public void setReason(@Nullable String setterArg) {
      this.reason = setterArg;
    }

    public static final class Builder {

      private @Nullable ConversationData conversation;

      public @NonNull Builder setConversation(@Nullable ConversationData setterArg) {
        this.conversation = setterArg;
        return this;
      }

      private @Nullable String reason;

      public @NonNull Builder setReason(@Nullable String setterArg) {
        this.reason = setterArg;
        return this;
      }

      public @NonNull ConversationUpdatedData build() {
        ConversationUpdatedData pigeonReturn = new ConversationUpdatedData();
        pigeonReturn.setConversation(conversation);
        pigeonReturn.setReason(reason);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((conversation == null) ? null : conversation.toList());
      toListResult.add(reason);
      return toListResult;
    }

    static @NonNull ConversationUpdatedData fromList(@NonNull ArrayList<Object> list) {
      ConversationUpdatedData pigeonResult = new ConversationUpdatedData();
      Object conversation = list.get(0);
      pigeonResult.setConversation((conversation == null) ? null : ConversationData.fromList((ArrayList<Object>) conversation));
      Object reason = list.get(1);
      pigeonResult.setReason((String) reason);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ErrorInfoData {
    private @Nullable Long code;

    public @Nullable Long getCode() {
      return code;
    }

    public void setCode(@Nullable Long setterArg) {
      this.code = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    private @Nullable Long status;

    public @Nullable Long getStatus() {
      return status;
    }

    public void setStatus(@Nullable Long setterArg) {
      this.status = setterArg;
    }

    public static final class Builder {

      private @Nullable Long code;

      public @NonNull Builder setCode(@Nullable Long setterArg) {
        this.code = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      private @Nullable Long status;

      public @NonNull Builder setStatus(@Nullable Long setterArg) {
        this.status = setterArg;
        return this;
      }

      public @NonNull ErrorInfoData build() {
        ErrorInfoData pigeonReturn = new ErrorInfoData();
        pigeonReturn.setCode(code);
        pigeonReturn.setMessage(message);
        pigeonReturn.setStatus(status);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(code);
      toListResult.add(message);
      toListResult.add(status);
      return toListResult;
    }

    static @NonNull ErrorInfoData fromList(@NonNull ArrayList<Object> list) {
      ErrorInfoData pigeonResult = new ErrorInfoData();
      Object code = list.get(0);
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer) code : (Long) code));
      Object message = list.get(1);
      pigeonResult.setMessage((String) message);
      Object status = list.get(2);
      pigeonResult.setStatus((status == null) ? null : ((status instanceof Integer) ? (Integer) status : (Long) status));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PluginApiCodec extends StandardMessageCodec {
    public static final PluginApiCodec INSTANCE = new PluginApiCodec();

    private PluginApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ConversationClientData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PropertiesData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ConversationClientData) {
        stream.write(128);
        writeValue(stream, ((ConversationClientData) value).toList());
      } else if (value instanceof PropertiesData) {
        stream.write(129);
        writeValue(stream, ((PropertiesData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PluginApi {

    void debug(@NonNull Boolean enableNative, @NonNull Boolean enableSdk);

    void create(@NonNull String jwtToken, @NonNull PropertiesData properties, @NonNull Result<ConversationClientData> result);

    /** The codec used by PluginApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PluginApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PluginApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PluginApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.PluginApi.debug", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableNativeArg = (Boolean) args.get(0);
                Boolean enableSdkArg = (Boolean) args.get(1);
                try {
                  api.debug(enableNativeArg, enableSdkArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.PluginApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String jwtTokenArg = (String) args.get(0);
                PropertiesData propertiesArg = (PropertiesData) args.get(1);
                Result<ConversationClientData> resultCallback =
                    new Result<ConversationClientData>() {
                      public void success(ConversationClientData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.create(jwtTokenArg, propertiesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class ConversationClientApiCodec extends StandardMessageCodec {
    public static final ConversationClientApiCodec INSTANCE = new ConversationClientApiCodec();

    private ConversationClientApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ConversationData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return TokenData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return UserData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else if (value instanceof ConversationData) {
        stream.write(129);
        writeValue(stream, ((ConversationData) value).toList());
      } else if (value instanceof TokenData) {
        stream.write(130);
        writeValue(stream, ((TokenData) value).toList());
      } else if (value instanceof UserData) {
        stream.write(131);
        writeValue(stream, ((UserData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ConversationClientApi {

    void updateToken(@NonNull String token, @NonNull Result<Void> result);

    void shutdown();

    void createConversation(@NonNull String friendlyName, @NonNull Result<ConversationData> result);

    void getMyConversations(@NonNull Result<List<ConversationData>> result);

    void getConversation(@NonNull String conversationSidOrUniqueName, @NonNull Result<ConversationData> result);

    void getMyUser(@NonNull Result<UserData> result);

    void registerForNotification(@NonNull TokenData tokenData, @NonNull Result<Void> result);

    void unregisterForNotification(@NonNull TokenData tokenData, @NonNull Result<Void> result);

    /** The codec used by ConversationClientApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ConversationClientApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ConversationClientApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable ConversationClientApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.updateToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String tokenArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateToken(tokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.shutdown", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.shutdown();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.createConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String friendlyNameArg = (String) args.get(0);
                Result<ConversationData> resultCallback =
                    new Result<ConversationData>() {
                      public void success(ConversationData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createConversation(friendlyNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getMyConversations", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<List<ConversationData>> resultCallback =
                    new Result<List<ConversationData>>() {
                      public void success(List<ConversationData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMyConversations(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getConversation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidOrUniqueNameArg = (String) args.get(0);
                Result<ConversationData> resultCallback =
                    new Result<ConversationData>() {
                      public void success(ConversationData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getConversation(conversationSidOrUniqueNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.getMyUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<UserData> resultCallback =
                    new Result<UserData>() {
                      public void success(UserData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMyUser(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.registerForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TokenData tokenDataArg = (TokenData) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerForNotification(tokenDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationClientApi.unregisterForNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                TokenData tokenDataArg = (TokenData) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.unregisterForNotification(tokenDataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class ConversationApiCodec extends StandardMessageCodec {
    public static final ConversationApiCodec INSTANCE = new ConversationApiCodec();

    private ConversationApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return MessageCount.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return MessageData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return MessageMediaData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return MessageOptionsData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ParticipantData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else if (value instanceof MessageCount) {
        stream.write(129);
        writeValue(stream, ((MessageCount) value).toList());
      } else if (value instanceof MessageData) {
        stream.write(130);
        writeValue(stream, ((MessageData) value).toList());
      } else if (value instanceof MessageMediaData) {
        stream.write(131);
        writeValue(stream, ((MessageMediaData) value).toList());
      } else if (value instanceof MessageOptionsData) {
        stream.write(132);
        writeValue(stream, ((MessageOptionsData) value).toList());
      } else if (value instanceof ParticipantData) {
        stream.write(133);
        writeValue(stream, ((ParticipantData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ConversationApi {

    void join(@NonNull String conversationSid, @NonNull Result<Void> result);

    void leave(@NonNull String conversationSid, @NonNull Result<Void> result);

    void destroy(@NonNull String conversationSid, @NonNull Result<Void> result);

    void typing(@NonNull String conversationSid, @NonNull Result<Void> result);

    void sendMessage(@NonNull String conversationSid, @NonNull MessageOptionsData options, @NonNull Result<MessageData> result);

    void addParticipantByIdentity(@NonNull String conversationSid, @NonNull String identity, @NonNull Result<Boolean> result);

    void removeParticipant(@NonNull String conversationSid, @NonNull String participantSid, @NonNull Result<Boolean> result);

    void removeParticipantByIdentity(@NonNull String conversationSid, @NonNull String identity, @NonNull Result<Boolean> result);

    void getParticipantByIdentity(@NonNull String conversationSid, @NonNull String identity, @NonNull Result<ParticipantData> result);

    void getParticipantBySid(@NonNull String conversationSid, @NonNull String participantSid, @NonNull Result<ParticipantData> result);

    void getParticipantsList(@NonNull String conversationSid, @NonNull Result<List<ParticipantData>> result);

    void getMessagesCount(@NonNull String conversationSid, @NonNull Result<MessageCount> result);

    void getUnreadMessagesCount(@NonNull String conversationSid, @NonNull Result<Long> result);

    void advanceLastReadMessageIndex(@NonNull String conversationSid, @NonNull Long lastReadMessageIndex, @NonNull Result<MessageCount> result);

    void setLastReadMessageIndex(@NonNull String conversationSid, @NonNull Long lastReadMessageIndex, @NonNull Result<MessageCount> result);

    void setAllMessagesRead(@NonNull String conversationSid, @NonNull Result<MessageCount> result);

    void setAllMessagesUnread(@NonNull String conversationSid, @NonNull Result<MessageCount> result);

    void getParticipantsCount(@NonNull String conversationSid, @NonNull Result<Long> result);

    void getMessagesAfter(@NonNull String conversationSid, @NonNull Long index, @NonNull Long count, @NonNull Result<List<MessageData>> result);

    void getMessagesBefore(@NonNull String conversationSid, @NonNull Long index, @NonNull Long count, @NonNull Result<List<MessageData>> result);

    void getMessageByIndex(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<MessageData> result);

    void getLastMessages(@NonNull String conversationSid, @NonNull Long count, @NonNull Result<List<MessageData>> result);

    void removeMessage(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<Boolean> result);

    void setAttributes(@NonNull String conversationSid, @NonNull AttributesData attributes, @NonNull Result<Void> result);

    void setFriendlyName(@NonNull String conversationSid, @NonNull String friendlyName, @NonNull Result<Void> result);

    void setNotificationLevel(@NonNull String conversationSid, @NonNull String notificationLevel, @NonNull Result<Void> result);

    void setUniqueName(@NonNull String conversationSid, @NonNull String uniqueName, @NonNull Result<Void> result);

    /** The codec used by ConversationApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ConversationApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ConversationApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable ConversationApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.join", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.join(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.leave", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.leave(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.destroy", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.destroy(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.typing", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.typing(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                MessageOptionsData optionsArg = (MessageOptionsData) args.get(1);
                Result<MessageData> resultCallback =
                    new Result<MessageData>() {
                      public void success(MessageData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendMessage(conversationSidArg, optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.addParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String identityArg = (String) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.addParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.removeParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String participantSidArg = (String) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeParticipant(conversationSidArg, participantSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.removeParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String identityArg = (String) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantByIdentity", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String identityArg = (String) args.get(1);
                Result<ParticipantData> resultCallback =
                    new Result<ParticipantData>() {
                      public void success(ParticipantData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getParticipantByIdentity(conversationSidArg, identityArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantBySid", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String participantSidArg = (String) args.get(1);
                Result<ParticipantData> resultCallback =
                    new Result<ParticipantData>() {
                      public void success(ParticipantData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getParticipantBySid(conversationSidArg, participantSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantsList", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<List<ParticipantData>> resultCallback =
                    new Result<List<ParticipantData>>() {
                      public void success(List<ParticipantData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getParticipantsList(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<MessageCount> resultCallback =
                    new Result<MessageCount>() {
                      public void success(MessageCount result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMessagesCount(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getUnreadMessagesCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getUnreadMessagesCount(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.advanceLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number lastReadMessageIndexArg = (Number) args.get(1);
                Result<MessageCount> resultCallback =
                    new Result<MessageCount>() {
                      public void success(MessageCount result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.advanceLastReadMessageIndex(conversationSidArg, (lastReadMessageIndexArg == null) ? null : lastReadMessageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setLastReadMessageIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number lastReadMessageIndexArg = (Number) args.get(1);
                Result<MessageCount> resultCallback =
                    new Result<MessageCount>() {
                      public void success(MessageCount result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setLastReadMessageIndex(conversationSidArg, (lastReadMessageIndexArg == null) ? null : lastReadMessageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setAllMessagesRead", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<MessageCount> resultCallback =
                    new Result<MessageCount>() {
                      public void success(MessageCount result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAllMessagesRead(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setAllMessagesUnread", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<MessageCount> resultCallback =
                    new Result<MessageCount>() {
                      public void success(MessageCount result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAllMessagesUnread(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getParticipantsCount", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getParticipantsCount(conversationSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesAfter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number indexArg = (Number) args.get(1);
                Number countArg = (Number) args.get(2);
                Result<List<MessageData>> resultCallback =
                    new Result<List<MessageData>>() {
                      public void success(List<MessageData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMessagesAfter(conversationSidArg, (indexArg == null) ? null : indexArg.longValue(), (countArg == null) ? null : countArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessagesBefore", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number indexArg = (Number) args.get(1);
                Number countArg = (Number) args.get(2);
                Result<List<MessageData>> resultCallback =
                    new Result<List<MessageData>>() {
                      public void success(List<MessageData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMessagesBefore(conversationSidArg, (indexArg == null) ? null : indexArg.longValue(), (countArg == null) ? null : countArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getMessageByIndex", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<MessageData> resultCallback =
                    new Result<MessageData>() {
                      public void success(MessageData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMessageByIndex(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.getLastMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number countArg = (Number) args.get(1);
                Result<List<MessageData>> resultCallback =
                    new Result<List<MessageData>>() {
                      public void success(List<MessageData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLastMessages(conversationSidArg, (countArg == null) ? null : countArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.removeMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.removeMessage(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                AttributesData attributesArg = (AttributesData) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAttributes(conversationSidArg, attributesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String friendlyNameArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setFriendlyName(conversationSidArg, friendlyNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setNotificationLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String notificationLevelArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setNotificationLevel(conversationSidArg, notificationLevelArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ConversationApi.setUniqueName", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String uniqueNameArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setUniqueName(conversationSidArg, uniqueNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class ParticipantApiCodec extends StandardMessageCodec {
    public static final ParticipantApiCodec INSTANCE = new ParticipantApiCodec();

    private ParticipantApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return UserData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else if (value instanceof UserData) {
        stream.write(129);
        writeValue(stream, ((UserData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ParticipantApi {

    void getUser(@NonNull String conversationSid, @NonNull String participantSid, @NonNull Result<UserData> result);

    void setAttributes(@NonNull String conversationSid, @NonNull String participantSid, @NonNull AttributesData attributes, @NonNull Result<Void> result);

    void remove(@NonNull String conversationSid, @NonNull String participantSid, @NonNull Result<Void> result);

    /** The codec used by ParticipantApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ParticipantApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ParticipantApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable ParticipantApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ParticipantApi.getUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String participantSidArg = (String) args.get(1);
                Result<UserData> resultCallback =
                    new Result<UserData>() {
                      public void success(UserData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getUser(conversationSidArg, participantSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ParticipantApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String participantSidArg = (String) args.get(1);
                AttributesData attributesArg = (AttributesData) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAttributes(conversationSidArg, participantSidArg, attributesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.ParticipantApi.remove", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                String participantSidArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.remove(conversationSidArg, participantSidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();

    private MessageApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DeliveryReceiptData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DetailedDeliveryReceiptData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ParticipantData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else if (value instanceof DeliveryReceiptData) {
        stream.write(129);
        writeValue(stream, ((DeliveryReceiptData) value).toList());
      } else if (value instanceof DetailedDeliveryReceiptData) {
        stream.write(130);
        writeValue(stream, ((DetailedDeliveryReceiptData) value).toList());
      } else if (value instanceof ParticipantData) {
        stream.write(131);
        writeValue(stream, ((ParticipantData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MessageApi {

    void getMediaContentTemporaryUrl(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<String> result);

    void getParticipant(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<ParticipantData> result);

    void setAttributes(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull AttributesData attributes, @NonNull Result<Void> result);

    void updateMessageBody(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull String messageBody, @NonNull Result<Void> result);

    void getAggregatedDeliveryReceipt(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<DeliveryReceiptData> result);

    void getDetailedDeliveryReceiptList(@NonNull String conversationSid, @NonNull Long messageIndex, @NonNull Result<List<DetailedDeliveryReceiptData>> result);

    /** The codec used by MessageApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.getMediaContentTemporaryUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getMediaContentTemporaryUrl(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.getParticipant", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<ParticipantData> resultCallback =
                    new Result<ParticipantData>() {
                      public void success(ParticipantData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getParticipant(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                AttributesData attributesArg = (AttributesData) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAttributes(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), attributesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.updateMessageBody", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                String messageBodyArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateMessageBody(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), messageBodyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.getAggregatedDeliveryReceipt", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<DeliveryReceiptData> resultCallback =
                    new Result<DeliveryReceiptData>() {
                      public void success(DeliveryReceiptData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAggregatedDeliveryReceipt(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.MessageApi.getDetailedDeliveryReceiptList", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String conversationSidArg = (String) args.get(0);
                Number messageIndexArg = (Number) args.get(1);
                Result<List<DetailedDeliveryReceiptData>> resultCallback =
                    new Result<List<DetailedDeliveryReceiptData>>() {
                      public void success(List<DetailedDeliveryReceiptData> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDetailedDeliveryReceiptList(conversationSidArg, (messageIndexArg == null) ? null : messageIndexArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class UserApiCodec extends StandardMessageCodec {
    public static final UserApiCodec INSTANCE = new UserApiCodec();

    private UserApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface UserApi {

    void setFriendlyName(@NonNull String identity, @NonNull String friendlyName, @NonNull Result<Void> result);

    void setAttributes(@NonNull String identity, @NonNull AttributesData attributes, @NonNull Result<Void> result);

    /** The codec used by UserApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return UserApiCodec.INSTANCE;
    }
    /**Sets up an instance of `UserApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable UserApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.UserApi.setFriendlyName", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String identityArg = (String) args.get(0);
                String friendlyNameArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setFriendlyName(identityArg, friendlyNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.twilio_conversations.UserApi.setAttributes", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String identityArg = (String) args.get(0);
                AttributesData attributesArg = (AttributesData) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setAttributes(identityArg, attributesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class FlutterConversationClientApiCodec extends StandardMessageCodec {
    public static final FlutterConversationClientApiCodec INSTANCE = new FlutterConversationClientApiCodec();

    private FlutterConversationClientApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AttributesData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ConversationData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConversationUpdatedData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ErrorInfoData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return MessageData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return MessageMediaData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ParticipantData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return UserData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AttributesData) {
        stream.write(128);
        writeValue(stream, ((AttributesData) value).toList());
      } else if (value instanceof ConversationData) {
        stream.write(129);
        writeValue(stream, ((ConversationData) value).toList());
      } else if (value instanceof ConversationUpdatedData) {
        stream.write(130);
        writeValue(stream, ((ConversationUpdatedData) value).toList());
      } else if (value instanceof ErrorInfoData) {
        stream.write(131);
        writeValue(stream, ((ErrorInfoData) value).toList());
      } else if (value instanceof MessageData) {
        stream.write(132);
        writeValue(stream, ((MessageData) value).toList());
      } else if (value instanceof MessageMediaData) {
        stream.write(133);
        writeValue(stream, ((MessageMediaData) value).toList());
      } else if (value instanceof ParticipantData) {
        stream.write(134);
        writeValue(stream, ((ParticipantData) value).toList());
      } else if (value instanceof UserData) {
        stream.write(135);
        writeValue(stream, ((UserData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterConversationClientApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public FlutterConversationClientApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterConversationClientApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FlutterConversationClientApiCodec.INSTANCE;
    }
    public void error(@NonNull ErrorInfoData errorInfoDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.error", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(errorInfoDataArg)),
          channelReply -> callback.reply(null));
    }
    public void conversationAdded(@NonNull ConversationData conversationDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationAdded", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(conversationDataArg)),
          channelReply -> callback.reply(null));
    }
    public void conversationUpdated(@NonNull ConversationUpdatedData eventArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> callback.reply(null));
    }
    public void conversationDeleted(@NonNull ConversationData conversationDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationDeleted", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(conversationDataArg)),
          channelReply -> callback.reply(null));
    }
    public void clientSynchronization(@NonNull String synchronizationStatusArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.clientSynchronization", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(synchronizationStatusArg)),
          channelReply -> callback.reply(null));
    }
    public void conversationSynchronizationChange(@NonNull ConversationData conversationDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.conversationSynchronizationChange", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(conversationDataArg)),
          channelReply -> callback.reply(null));
    }
    public void connectionStateChange(@NonNull String connectionStateArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.connectionStateChange", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(connectionStateArg)),
          channelReply -> callback.reply(null));
    }
    public void tokenAboutToExpire(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.tokenAboutToExpire", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void tokenExpired(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.tokenExpired", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void userSubscribed(@NonNull UserData userDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userSubscribed", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(userDataArg)),
          channelReply -> callback.reply(null));
    }
    public void userUnsubscribed(@NonNull UserData userDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUnsubscribed", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(userDataArg)),
          channelReply -> callback.reply(null));
    }
    public void userUpdated(@NonNull UserData userDataArg, @NonNull String reasonArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.userUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(userDataArg, reasonArg)),
          channelReply -> callback.reply(null));
    }
    public void addedToConversationNotification(@NonNull String conversationSidArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.addedToConversationNotification", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(conversationSidArg)),
          channelReply -> callback.reply(null));
    }
    public void newMessageNotification(@NonNull String conversationSidArg, @NonNull Long messageIndexArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.newMessageNotification", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, messageIndexArg)),
          channelReply -> callback.reply(null));
    }
    public void notificationSubscribed(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationSubscribed", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void notificationFailed(@NonNull ErrorInfoData errorInfoDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.notificationFailed", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(errorInfoDataArg)),
          channelReply -> callback.reply(null));
    }
    public void removedFromConversationNotification(@NonNull String conversationSidArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.removedFromConversationNotification", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(conversationSidArg)),
          channelReply -> callback.reply(null));
    }
    public void registered(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registered", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void registrationFailed(@NonNull ErrorInfoData errorInfoDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.registrationFailed", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(errorInfoDataArg)),
          channelReply -> callback.reply(null));
    }
    public void deregistered(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistered", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void deregistrationFailed(@NonNull ErrorInfoData errorInfoDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.deregistrationFailed", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(errorInfoDataArg)),
          channelReply -> callback.reply(null));
    }
    public void messageAdded(@NonNull String conversationSidArg, @NonNull MessageData messageDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageAdded", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)),
          channelReply -> callback.reply(null));
    }
    public void messageUpdated(@NonNull String conversationSidArg, @NonNull MessageData messageDataArg, @NonNull String reasonArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg, reasonArg)),
          channelReply -> callback.reply(null));
    }
    public void messageDeleted(@NonNull String conversationSidArg, @NonNull MessageData messageDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.messageDeleted", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, messageDataArg)),
          channelReply -> callback.reply(null));
    }
    public void participantAdded(@NonNull String conversationSidArg, @NonNull ParticipantData participantDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantAdded", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)),
          channelReply -> callback.reply(null));
    }
    public void participantUpdated(@NonNull String conversationSidArg, @NonNull ParticipantData participantDataArg, @NonNull String reasonArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantUpdated", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg, reasonArg)),
          channelReply -> callback.reply(null));
    }
    public void participantDeleted(@NonNull String conversationSidArg, @NonNull ParticipantData participantDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.participantDeleted", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, participantDataArg)),
          channelReply -> callback.reply(null));
    }
    public void typingStarted(@NonNull String conversationSidArg, @NonNull ConversationData conversationDataArg, @NonNull ParticipantData participantDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingStarted", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)),
          channelReply -> callback.reply(null));
    }
    public void typingEnded(@NonNull String conversationSidArg, @NonNull ConversationData conversationDataArg, @NonNull ParticipantData participantDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.typingEnded", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg, participantDataArg)),
          channelReply -> callback.reply(null));
    }
    public void synchronizationChanged(@NonNull String conversationSidArg, @NonNull ConversationData conversationDataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterConversationClientApi.synchronizationChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(conversationSidArg, conversationDataArg)),
          channelReply -> callback.reply(null));
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterLoggingApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public FlutterLoggingApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterLoggingApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void logFromHost(@NonNull String msgArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.twilio_conversations.FlutterLoggingApi.logFromHost", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> callback.reply(null));
    }
  }
}
